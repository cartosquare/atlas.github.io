<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CartoSquare</title>
  
  <subtitle>making things. saying things.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cartosquare.com/"/>
  <updated>2017-12-05T17:20:06.527Z</updated>
  <id>http://www.cartosquare.com/</id>
  
  <author>
    <name>徐翔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>神经网络</title>
    <link href="http://www.cartosquare.com/2017/12/05/neural-networks/"/>
    <id>http://www.cartosquare.com/2017/12/05/neural-networks/</id>
    <published>2017-12-05T13:11:39.000Z</published>
    <updated>2017-12-05T17:20:06.527Z</updated>
    
    <content type="html"><![CDATA[<p>神经网络通常由输入层（数据层）、全连接层、激活层、正规化层、以及损失层组成。其中的全连接层，激活层和正规化层又称为隐藏层。下面分别介绍。</p><a id="more"></a><h2 id="全连接层（Full-Connected-Layer）"><a href="#全连接层（Full-Connected-Layer）" class="headerlink" title="全连接层（Full Connected Layer）"></a>全连接层（Full Connected Layer）</h2><h3 id="输出计算"><a href="#输出计算" class="headerlink" title="输出计算"></a>输出计算</h3><p>设$M \times K$维矩阵$X$是上一层的输出，其中K是每一个样本的特征数, M 为 batch size；$M \times N$维向量Y是全连接层的输出, 其中N是全连接层的神经元个数，那么全连接层的参数$W$是一个$N \times K$维的矩阵, 基b是一个N维的矩阵，并且有：<br>$$<br>Y = XW^T + b \qquad (1)<br>$$<br>注意可能和其他地方的形式不太一样，其他地方可能写为:<br>$$ Y = WX + b$$<br>只要对两边进行转置，并替换Y、b、X的行列顺序即和上面是等价的，式（1）这种方式实际上是caffe2进行计算的方式：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;</div><div class="line">      <span class="keyword">typename</span> T_X,</div><div class="line">      <span class="keyword">typename</span> T_W,</div><div class="line">      <span class="keyword">typename</span> T_B,</div><div class="line">      <span class="keyword">typename</span> T_Y,</div><div class="line">      <span class="keyword">typename</span> MATH&gt;</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">DoRunWithType</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; X = Input(<span class="number">0</span>);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; W = Input(<span class="number">1</span>);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; b = Input(<span class="number">2</span>);</div><div class="line">    <span class="keyword">auto</span>* Y = Output(<span class="number">0</span>);</div><div class="line">    CAFFE_ENFORCE(b.ndim() == <span class="number">1</span>, b.ndim());</div><div class="line">    <span class="comment">// batch size</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> canonical_axis = X.canonical_axis_index(axis_);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> M = X.size_to_dim(canonical_axis);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> K = X.size_from_dim(canonical_axis);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> canonical_axis_w = W.canonical_axis_index(axis_w_);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = TransposeWeight ? W.size_to_dim(canonical_axis_w)</div><div class="line">                                  : W.size_from_dim(canonical_axis_w);</div><div class="line"></div><div class="line">    <span class="comment">// Error checking</span></div><div class="line">    CAFFE_ENFORCE(M == X.size() / K, dimErrorString());</div><div class="line">    CAFFE_ENFORCE(K == W.size() / N, dimErrorString());</div><div class="line">    CAFFE_ENFORCE(N == b.dim32(<span class="number">0</span>), dimErrorString());</div><div class="line">    CAFFE_ENFORCE(N == b.size(), dimErrorString());</div><div class="line"></div><div class="line">    Y_shape_cache_ = X.dims();</div><div class="line">    <span class="comment">// This is an invariant of canonical_axis, so we can DCHECK.</span></div><div class="line">    DCHECK_LE(canonical_axis + <span class="number">1</span>, Y_shape_cache_.size());</div><div class="line">    Y_shape_cache_.resize(canonical_axis + <span class="number">1</span>);</div><div class="line">    Y_shape_cache_[canonical_axis] = N;</div><div class="line">    Y-&gt;Resize(Y_shape_cache_);</div><div class="line">    CAFFE_ENFORCE(M * N == Y-&gt;size(), dimErrorString());</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (X.size() == <span class="number">0</span>) &#123;</div><div class="line">      <span class="comment">// skip the rest of the computation if X is empty</span></div><div class="line">      Y-&gt;<span class="keyword">template</span> mutable_data&lt;T_Y&gt;();</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// default to FLOAT as math.h does.</span></div><div class="line">    TensorProto::DataType math_type = TensorProto_DataType_FLOAT;</div><div class="line">    <span class="keyword">if</span> (fp16_type&lt;MATH&gt;()) &#123;</div><div class="line">      math_type = TensorProto_DataType_FLOAT16;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 计算XW^T</span></div><div class="line">    math::Gemm&lt;T_X, Context, Engine&gt;(</div><div class="line">        CblasNoTrans,</div><div class="line">        TransposeWeight ? CblasTrans : CblasNoTrans,</div><div class="line">        M,</div><div class="line">        N,</div><div class="line">        K,</div><div class="line">        <span class="number">1</span>,</div><div class="line">        X.<span class="keyword">template</span> data&lt;T_X&gt;(),</div><div class="line">        W.<span class="keyword">template</span> data&lt;T_W&gt;(),</div><div class="line">        <span class="number">0</span>,</div><div class="line">        Y-&gt;<span class="keyword">template</span> mutable_data&lt;T_Y&gt;(),</div><div class="line">        &amp;context_,</div><div class="line">        math_type);</div><div class="line">    <span class="comment">// 加上基向量</span></div><div class="line">    <span class="keyword">if</span> (bias_multiplier_.size() != M) &#123;</div><div class="line">      <span class="comment">// If the helper bias multiplier is not M, reshape and fill it with one.</span></div><div class="line">      bias_multiplier_.Resize(M);</div><div class="line">      math::Set&lt;T_B, Context&gt;(</div><div class="line">          M,</div><div class="line">          convert::To&lt;<span class="keyword">float</span>, T_B&gt;(<span class="number">1</span>),</div><div class="line">          bias_multiplier_.<span class="keyword">template</span> mutable_data&lt;T_B&gt;(),</div><div class="line">          &amp;context_);</div><div class="line">    &#125;</div><div class="line">    math::Gemm&lt;T_B, Context, Engine&gt;(</div><div class="line">        CblasNoTrans,</div><div class="line">        CblasNoTrans,</div><div class="line">        M,</div><div class="line">        N,</div><div class="line">        <span class="number">1</span>,</div><div class="line">        <span class="number">1</span>,</div><div class="line">        bias_multiplier_.<span class="keyword">template</span> data&lt;T_B&gt;(),</div><div class="line">        b.<span class="keyword">template</span> data&lt;T_B&gt;(),</div><div class="line">        <span class="number">1</span>,</div><div class="line">        Y-&gt;<span class="keyword">template</span> mutable_data&lt;T_Y&gt;(),</div><div class="line">        &amp;context_,</div><div class="line">        math_type);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>这里用了下面这个函数：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">void</span> Gemm&lt;<span class="keyword">float</span>, CPUContext&gt;(</div><div class="line">    <span class="keyword">const</span> CBLAS_TRANSPOSE TransA,</div><div class="line">    <span class="keyword">const</span> CBLAS_TRANSPOSE TransB,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> M,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> K,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span> alpha,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* A,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* B,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span> beta,</div><div class="line">    <span class="keyword">float</span>* C,</div><div class="line">    CPUContext* context,</div><div class="line">    TensorProto::DataType math_type);</div></pre></td></tr></table></figure></p><p>这个函数实现了下面这个操作：<br>$$C = alpha \cdot A \times B + beta \cdot C$$<br>这里A是$M \times K$矩阵，B是$K \times N$矩阵，C是$M \times N$矩阵。alpha, beta 都是标量。实际上，把 alpha 设为1，beta 设为0就是两个矩阵相乘。 </p><h3 id="导数计算"><a href="#导数计算" class="headerlink" title="导数计算"></a>导数计算</h3><p>为了求dW，我们可以设式（1）中的W的维数为$K * N$，那么有：<br>$$Y = XW + b \qquad (2)$$<br>其实，转置只是把元素的顺序改变了，所以有$dX=(d(X^T))^T$<br>对于式（2），有：<br>$$<br>\frac{dY}{dW} = X \\<br>\frac{dY}{dX} = W \\<br>\frac{dY}{db} = 1 \\<br>$$<br>caffe2 中的代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;</div><div class="line">     <span class="keyword">typename</span> T_X,</div><div class="line">     <span class="keyword">typename</span> T_W,</div><div class="line">     <span class="keyword">typename</span> T_DY,</div><div class="line">     <span class="keyword">typename</span> T_B,</div><div class="line">     <span class="keyword">typename</span> T_DX,</div><div class="line">     <span class="keyword">typename</span> T_DW,</div><div class="line">     <span class="keyword">typename</span> T_DB,</div><div class="line">     <span class="keyword">typename</span> MATH&gt;</div><div class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">DoRunWithType</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">const</span> <span class="keyword">auto</span>&amp; X = Input(<span class="number">0</span>);</div><div class="line">   <span class="keyword">const</span> <span class="keyword">auto</span>&amp; W = Input(<span class="number">1</span>);</div><div class="line">   <span class="keyword">const</span> <span class="keyword">auto</span>&amp; dY = Input(<span class="number">2</span>);</div><div class="line">   <span class="comment">// batch size</span></div><div class="line">   <span class="keyword">const</span> <span class="keyword">auto</span> canonical_axis = X.canonical_axis_index(axis_);</div><div class="line">   <span class="keyword">const</span> <span class="keyword">int</span> M = X.size_to_dim(canonical_axis);</div><div class="line">   <span class="keyword">const</span> <span class="keyword">int</span> K = X.size_from_dim(canonical_axis);</div><div class="line">   <span class="keyword">const</span> <span class="keyword">auto</span> canonical_axis_w = W.canonical_axis_index(axis_w_);</div><div class="line">   <span class="keyword">const</span> <span class="keyword">int</span> N = W.size_to_dim(canonical_axis_w);</div><div class="line">   CAFFE_ENFORCE(M * K == X.size());</div><div class="line">   CAFFE_ENFORCE(K * N == W.size());</div><div class="line"></div><div class="line">   <span class="keyword">auto</span>* dW = Output(<span class="number">0</span>);</div><div class="line">   <span class="keyword">auto</span>* db = Output(<span class="number">1</span>);</div><div class="line">   dW-&gt;ResizeLike(W);</div><div class="line">   db-&gt;Resize(N);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (X.size() == <span class="number">0</span>) &#123;</div><div class="line">     <span class="comment">// generate a zero blob for db and dW when X is empty</span></div><div class="line">     <span class="comment">// skipped</span></div><div class="line">     <span class="comment">//...</span></div><div class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// default to FLOAT as math.h does.</span></div><div class="line">   TensorProto::DataType math_type = TensorProto_DataType_FLOAT;</div><div class="line">   <span class="keyword">if</span> (fp16_type&lt;MATH&gt;()) &#123;</div><div class="line">     math_type = TensorProto_DataType_FLOAT16;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Compute dW</span></div><div class="line">   math::Gemm&lt;T_DY, Context, Engine&gt;(</div><div class="line">       CblasTrans,</div><div class="line">       CblasNoTrans,</div><div class="line">       N,</div><div class="line">       K,</div><div class="line">       M,</div><div class="line">       <span class="number">1</span>,</div><div class="line">       dY.<span class="keyword">template</span> data&lt;T_DY&gt;(),</div><div class="line">       X.<span class="keyword">template</span> data&lt;T_X&gt;(),</div><div class="line">       <span class="number">0</span>,</div><div class="line">       dW-&gt;<span class="keyword">template</span> mutable_data&lt;T_DW&gt;(),</div><div class="line">       &amp;context_,</div><div class="line">       math_type);</div><div class="line">   <span class="keyword">if</span> (bias_multiplier_.size() != M) &#123;</div><div class="line">     <span class="comment">// If the helper bias multiplier is not M, reshape and fill it</span></div><div class="line">     <span class="comment">// with one.</span></div><div class="line">     bias_multiplier_.Resize(M);</div><div class="line">     math::Set&lt;T_B, Context&gt;(</div><div class="line">         M,</div><div class="line">         convert::To&lt;<span class="keyword">float</span>, T_B&gt;(<span class="number">1</span>),</div><div class="line">         bias_multiplier_.<span class="keyword">template</span> mutable_data&lt;T_B&gt;(),</div><div class="line">         &amp;context_);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// Compute dB</span></div><div class="line">   math::Gemv&lt;T_DY, Context&gt;(</div><div class="line">       CblasTrans,</div><div class="line">       M,</div><div class="line">       N,</div><div class="line">       <span class="number">1</span>,</div><div class="line">       dY.<span class="keyword">template</span> data&lt;T_DY&gt;(),</div><div class="line">       bias_multiplier_.<span class="keyword">template</span> data&lt;T_B&gt;(),</div><div class="line">       <span class="number">0</span>,</div><div class="line">       db-&gt;<span class="keyword">template</span> mutable_data&lt;T_DB&gt;(),</div><div class="line">       &amp;context_);</div><div class="line"></div><div class="line">   <span class="comment">// Compute dX</span></div><div class="line">   <span class="keyword">if</span> (OutputSize() == <span class="number">3</span>) &#123;</div><div class="line">     <span class="keyword">auto</span>* dX = Output(<span class="number">2</span>);</div><div class="line">     dX-&gt;ResizeLike(X);</div><div class="line">     math::Gemm&lt;T_DX, Context, Engine&gt;(</div><div class="line">         CblasNoTrans,</div><div class="line">         CblasNoTrans,</div><div class="line">         M,</div><div class="line">         K,</div><div class="line">         N,</div><div class="line">         <span class="number">1</span>,</div><div class="line">         dY.<span class="keyword">template</span> data&lt;T_DY&gt;(),</div><div class="line">         W.<span class="keyword">template</span> data&lt;T_W&gt;(),</div><div class="line">         <span class="number">0</span>,</div><div class="line">         dX-&gt;<span class="keyword">template</span> mutable_data&lt;T_DX&gt;(),</div><div class="line">         &amp;context_,</div><div class="line">         math_type);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><p>上面的dY是后向自动微分时上一层传进来的导数，需要与这一层的导数相乘再传到下一层。<br>这里还用到了下面这个函数：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">void</span> Gemv&lt;<span class="keyword">float</span>, CPUContext&gt;(</div><div class="line">    <span class="keyword">const</span> CBLAS_TRANSPOSE TransA,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> M,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span> alpha,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* A,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* x,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span> beta,</div><div class="line">    <span class="keyword">float</span>* y,</div><div class="line">    CPUContext* context,</div><div class="line">    TensorProto::DataType math_type);</div></pre></td></tr></table></figure></p><p>它实现的是下面的操作：<br>$$<br>y = alpha \cdot Ax + beta \cdot y<br>$$<br>其中A是$M \times N$矩阵，x是N维向量，y是M维向量。alpha 和 beta 都是标量，实际上设置 alpha 为1，beta为0，就是矩阵和向量相乘。</p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>常见的激活函数有Sigmoid、Tanh、ReLU以及Leaky ReLU函数。</p><h3 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h3><p>Sigmoid 函数具有下面的数学形式：<br>$$\sigma(x) = \frac{1}{1 + e^{-x}} \qquad (3)$$<br>它可以把实数输入映射到0和1之间。在神经网络早期，Sigmoid函数曾被广泛应用，但是有如下的缺点：</p><ul><li>梯度杀手：当Sigmoid的输出位于长尾部分时，梯度几乎为0，无法进行有效学习。</li><li>非0中心：Sigmoid的输出值不是以0位中心的（都大于0），这也导致了梯度计算的不稳定，学习不容易收敛。<br>caffe2实现：<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> SigmoidCPUFunctor &#123;</div><div class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span></span></div><div class="line">  <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n, <span class="keyword">const</span> T* x, T* y, CPUContext* <span class="comment">/*device_context*/</span>)</span> &#123;</div><div class="line">    ConstEigenVectorArrayMap&lt;T&gt; xM(x, n);</div><div class="line">    EigenVectorArrayMap&lt;T&gt;(y, n) = <span class="number">1.</span> / (<span class="number">1.</span> + (-xM).<span class="built_in">exp</span>());</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><p>这里的输入x是一个n维向量。<br>根据导出的除法法则，可以推导出Sigmoid函数的导数表达式：<br>$$<br>\begin{align}<br>\frac{d\sigma}{dx} &amp; =  \frac{0 \cdot (1 + e^{-x}) - (-1) \cdot e^{-x} \cdot 1}{(1 + e^{-x})^2} \\<br>&amp; = \frac{1}{1 + e^{-x}} \cdot \frac{e^{y_i}}{1 + e^{-x}} \\<br>&amp; =  \frac{1}{1 + e^{-x}} \cdot (1 - \frac{1}{1 + e^{-x}}) \\<br>&amp; = \sigma (x)  \cdot (1 - \sigma (x) ) \qquad (4)<br>\end{align}<br>$$<br>caffe2中的实现：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> SigmoidGradientCPUFunctor &#123;</div><div class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Run</span><span class="params">(</span></span></div><div class="line">      <span class="keyword">const</span> <span class="keyword">int</span> n,</div><div class="line">      <span class="keyword">const</span> T* y,</div><div class="line">      <span class="keyword">const</span> T* dy,</div><div class="line">      T* dx,</div><div class="line">      CPUContext* <span class="comment">/*device_context*/</span>) &#123;</div><div class="line">    ConstEigenVectorArrayMap&lt;T&gt; yM(y, n), dyM(dy, n);</div><div class="line">    EigenVectorArrayMap&lt;T&gt;(dx, n) = dyM * yM * (<span class="number">1.</span> - yM);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="Tanh"><a href="#Tanh" class="headerlink" title="Tanh"></a>Tanh</h3><p>Tanh函数对Sigmoid函数进行了放缩平移变换：<br>$$<br>\begin{align}<br>tanh(x) &amp; = 2\sigma (2x) - 1 \\<br>&amp; = \frac{2}{1 + e^{-2x}} - 1 \\<br>&amp; =  \frac{1 - e^{-2x}}{1 + e^{-2x}} \\<br>&amp; =  \frac{e^x - e^{-x}}{e^x + e^{-x}} \qquad (4)<br>\end{align}<br>$$<br>因此它的值域在-1到1之间。由此可见，Tanh比Sigmoid要更好，因此在实际使用时，能用Tanh就不应该用Sigmoid。<br>caffe2中的实现：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> TanhCPUFunctor &#123;</div><div class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span></span></div><div class="line">  <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n, <span class="keyword">const</span> T* x, T* y, CPUContext* <span class="comment">/*device_context*/</span>)</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAFFE2_USE_ACCELERATE</span></div><div class="line">    vvtanhf(y, x, &amp;n);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    ConstEigenVectorArrayMap&lt;T&gt; x_arr(x, n);</div><div class="line">    EigenVectorMap&lt;T&gt;(y, n) = <span class="number">1</span> - <span class="number">2</span> * ((x_arr * <span class="number">2</span>).<span class="built_in">exp</span>() + <span class="number">1</span>).inverse();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>Tanh的导数为：<br>$$<br>\begin{align}<br>\frac{dtanh}{dx} &amp; = \frac{(e^x + e^{-x}) \cdot (e^x + e^{-x}) - (e^x - e^{-x}) \cdot (e^x - e^{-x})}{(e^x + e^{-x})^2} \\<br>&amp; = \frac{(e^x + e^{-x})^2 - (e^x - e^{-x})^2}{(e^x + e^{-x})^2} \\<br>&amp; = 1 - (\frac{e^x - e^{-x}}{e^x + e^{-x}})^2 \\<br>&amp; = 1 - (tanh(x))^2<br>\end{align}<br>$$<br>caffe2中的实现：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> TanhGradientCPUFunctor &#123;</div><div class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Run</span><span class="params">(</span></span></div><div class="line">      <span class="keyword">const</span> <span class="keyword">int</span> n,</div><div class="line">      <span class="keyword">const</span> T* y,</div><div class="line">      <span class="keyword">const</span> T* dy,</div><div class="line">      T* dx,</div><div class="line">      CPUContext* <span class="comment">/*device_context*/</span>) &#123;</div><div class="line">    ConstEigenVectorArrayMap&lt;T&gt; dy_arr(dy, n);</div><div class="line">    ConstEigenVectorArrayMap&lt;T&gt; y_arr(y, n);</div><div class="line">    EigenVectorMap&lt;T&gt;(dx, n) = dy_arr * (<span class="number">1</span> - y_arr * y_arr);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p>ReLU 函数的形式如下：<br>$$f(x) = max(0, x) \qquad (5)$$<br>ReLU 函数的好处是：</p><ul><li>通非线性的Tanh和Sigmoid相比，线性的ReLU函数能够极大地加速梯度下降算法的收敛</li><li>计算十分简单<br>坏处是：</li><li>如果learning rate没有设置合理，会有很多神经元不被激活</li></ul><p>ReLU函数的导数是：<br>$$<br>\frac{df}{dn} =<br>\begin{cases}<br>0,  &amp; if\, x \lt 0 \\<br>1, &amp; if\, x \ge 0<br>\end{cases}<br>$$</p><p>实现代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> ReluOp&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="keyword">auto</span>&amp; X = Input(<span class="number">0</span>);</div><div class="line">  <span class="keyword">auto</span>* Y = Output(<span class="number">0</span>);</div><div class="line">  Y-&gt;ResizeLike(X);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CAFFE2_USE_ACCELERATE</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span> zero = <span class="number">0.0f</span>;</div><div class="line">  vDSP_vthres(X.data&lt;<span class="keyword">float</span>&gt;(), <span class="number">1</span>, &amp;zero, Y-&gt;mutable_data&lt;<span class="keyword">float</span>&gt;(), <span class="number">1</span>, X.size());</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  EigenVectorMap&lt;<span class="keyword">float</span>&gt;(Y-&gt;mutable_data&lt;<span class="keyword">float</span>&gt;(), X.size()) =</div><div class="line">      ConstEigenVectorMap&lt;<span class="keyword">float</span>&gt;(X.data&lt;<span class="keyword">float</span>&gt;(), X.size()).cwiseMax(<span class="number">0.f</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="comment">/* Naive implementation</span></div><div class="line">  const float* Xdata = X.data&lt;float&gt;();</div><div class="line">  float* Ydata = Y-&gt;mutable_data&lt;float&gt;();</div><div class="line">  for (int i = 0; i &lt; X.size(); ++i) &#123;</div><div class="line">    Ydata[i] = std::max(Xdata[i], 0.f);</div><div class="line">  &#125;</div><div class="line">  */</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> ReluGradientOp&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="keyword">auto</span>&amp; Y = Input(<span class="number">0</span>);</div><div class="line">  <span class="keyword">auto</span>&amp; dY = Input(<span class="number">1</span>);</div><div class="line">  <span class="keyword">auto</span>* dX = Output(<span class="number">0</span>);</div><div class="line">  CAFFE_ENFORCE_EQ(dY.size(), Y.size());</div><div class="line">  dX-&gt;ResizeLike(Y);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* Ydata = Y.data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* dYdata = dY.data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">float</span>* dXdata = dX-&gt;mutable_data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> proper vectorization with Eigen</span></div><div class="line">  EigenVectorArrayMap&lt;<span class="keyword">float</span>&gt; dXvec(dXdata, dX-&gt;size());</div><div class="line">  ConstEigenVectorArrayMap&lt;<span class="keyword">float</span>&gt; Yvec(Ydata, Y.size());</div><div class="line">  ConstEigenVectorArrayMap&lt;<span class="keyword">float</span>&gt; dYvec(dYdata, dY.size());</div><div class="line">  dXvec = dYvec * Yvec.cwiseSign();</div><div class="line">  <span class="comment">/* Previous implementation</span></div><div class="line">  for (int i = 0; i &lt; Y.size(); ++i) &#123;</div><div class="line">    dXdata[i] = Ydata[i] &gt; 0 ? dYdata[i] : 0;</div><div class="line">  &#125;</div><div class="line">  */</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="Leaky-ReLU"><a href="#Leaky-ReLU" class="headerlink" title="Leaky ReLU"></a>Leaky ReLU</h3><p>Leaky ReLU 修复了ReLU会杀死神经元的缺点：当输入小于0时，不直接置0，而是乘以一个很小的数$\alpha$(比如为0.01)：<br>$$<br>f(n) =<br>\begin{cases}<br>\alpha x,  &amp; if\, x \lt 0 \\<br>x, &amp; if\, x \ge 0<br>\end{cases}<br>$$<br>这里的$\alpha$也可以作为每个神经元的一个参数进行优化，就像PReLU里那样。<br>Leaky ReLU函数的导数是：<br>$$<br>\frac{df}{dn} =<br>\begin{cases}<br>\alpha,  &amp; if\, x \lt 0 \\<br>1, &amp; if\, x \ge 0<br>\end{cases}<br>$<br>实现代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> LeakyReluOp&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span>&amp; X = Input(<span class="number">0</span>);</div><div class="line">  <span class="keyword">auto</span>* Y = Output(<span class="number">0</span>);</div><div class="line">  Y-&gt;ResizeLike(X);</div><div class="line">  ConstEigenVectorMap&lt;<span class="keyword">float</span>&gt; Xvec(X.<span class="keyword">template</span> data&lt;<span class="keyword">float</span>&gt;(), X.size());</div><div class="line">  EigenVectorMap&lt;<span class="keyword">float</span>&gt; Yvec(Y-&gt;<span class="keyword">template</span> mutable_data&lt;<span class="keyword">float</span>&gt;(), Y-&gt;size());</div><div class="line">  Yvec = Xvec.cwiseMax(<span class="number">0.f</span>) + Xvec.cwiseMin(<span class="number">0.f</span>) * alpha_;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> LeakyReluGradientOp&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span>&amp; Y = Input(<span class="number">0</span>);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span>&amp; dY = Input(<span class="number">1</span>);</div><div class="line">  <span class="keyword">auto</span>* dX = Output(<span class="number">0</span>);</div><div class="line">  dX-&gt;ResizeLike(Y);</div><div class="line">  CAFFE_ENFORCE_EQ(Y.size(), dY.size());</div><div class="line">  ConstEigenVectorMap&lt;<span class="keyword">float</span>&gt; Yvec(Y.<span class="keyword">template</span> data&lt;<span class="keyword">float</span>&gt;(), Y.size());</div><div class="line">  ConstEigenVectorMap&lt;<span class="keyword">float</span>&gt; dYvec(dY.<span class="keyword">template</span> data&lt;<span class="keyword">float</span>&gt;(), dY.size());</div><div class="line">  EigenVectorMap&lt;<span class="keyword">float</span>&gt; dXvec(dX-&gt;<span class="keyword">template</span> mutable_data&lt;<span class="keyword">float</span>&gt;(), dX-&gt;size());</div><div class="line">  Eigen::VectorXf gtZero = (Yvec.<span class="built_in">array</span>() &gt;= <span class="number">0.0f</span>).cast&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  dXvec = dYvec.<span class="built_in">array</span>() * gtZero.<span class="built_in">array</span>() -</div><div class="line">      dYvec.<span class="built_in">array</span>() * (gtZero.<span class="built_in">array</span>() - <span class="number">1.0f</span>) * alpha_;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="正则化层"><a href="#正则化层" class="headerlink" title="正则化层"></a>正则化层</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;神经网络通常由输入层（数据层）、全连接层、激活层、正规化层、以及损失层组成。其中的全连接层，激活层和正规化层又称为隐藏层。下面分别介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://www.cartosquare.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="全连接层" scheme="http://www.cartosquare.com/tags/%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82/"/>
    
      <category term="激活函数" scheme="http://www.cartosquare.com/tags/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    
      <category term="正规化" scheme="http://www.cartosquare.com/tags/%E6%AD%A3%E8%A7%84%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>机器如何学习？</title>
    <link href="http://www.cartosquare.com/2017/11/26/how-machine-learning-to-learn/"/>
    <id>http://www.cartosquare.com/2017/11/26/how-machine-learning-to-learn/</id>
    <published>2017-11-26T12:13:39.000Z</published>
    <updated>2017-12-05T15:40:54.523Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习的目标是获得一组最优的参数，这些参数决定了评分函数，因此我们要找一个最优的评分函数。实际上通过引入损失函数，我们可以通过最小化损失函数来不断更新评分函数的参数，具体来说，机器学习可以通过一种迭代的技术，使得每一步的迭代之后，损失函数的输出都能减小，因此在有限步迭代之后，损失函数就能达到最小值点（当然这是一个局部最小值）。在每一次迭代之后，我们都会根据损失函数的输出更新评分函数的参数，这样就达到了学习的目的。</p><a id="more"></a><h2 id="梯度下降-Gradient-Decent"><a href="#梯度下降-Gradient-Decent" class="headerlink" title="梯度下降(Gradient Decent)"></a>梯度下降(Gradient Decent)</h2><p>梯度下降就是这样一种迭代技术。基于函数f的梯度负方向$-\Delta f$是这个函数下降最快的方向，Gradient Decent通过从某个点$w_0$出发，不断沿着梯度负方向前进一个小步长$\eta$来达到求函数f的局部最优解的目的：<br>$$w^*=argmin_wf(w) \qquad (1)$$</p><p>假设经过I步达到最优点$w^*$，那么寻找最优解的过程如下：</p><p>$$<br>w_1 = w_0 - \eta \Delta f(w_0) \\<br>w_2 = w_1 - \eta \Delta f(w_1) \\<br>\cdot\cdot\cdot \\<br>w^* = w_{I-1} - \eta \Delta f(w_{I-1})  \qquad (2)<br>$$</p><p>这里步长$\eta$的设置一般是动态的，如果设定为固定值，从点$w_0$到最优点的轨迹有点像Z字形，收敛的时间会很长，所以一般都会动态地减小步长值。</p><h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><p>为了进行迭代，我们必须要在每一步里计算当前点的梯度，也就是导数：<br>$$\frac{d}{dx}f = \lim_{x\to x_0}\frac {f(x) - f(x_0)}{x - x_0} \qquad (3)$$</p><p>考虑到实际上机器学习的函数十分复杂，首先它是评分函数和损失函数组成的复合函数：<br>$$F = Loss(Score(x)) \qquad (4)$$<br>其次，评分函数有可能十分复杂，比如，在深度学习里，评分函数是一系列网络层的复合，假设有N个网络层，每个网络的函数是$K_{i}$，那么评分函数就是这N个网络层的复合函数：</p><p>$$Score(x)=K_{n}(K_{n-1}(…K_1(x))) \qquad (5)$$</p><h4 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h4><p>因此一般的机器学习框架都会采用一种后向自动微分的方式求导数。这种方式不仅不需要使用微积分的分析方式求出导数的表达式，运算效率还特别高。其中的原理是运用了复合函数求导的链式法则：<br>$$\frac {d}{dx}f(y(x)) = \frac {df}{dy} \frac{dy}{dx} \qquad (6)$$</p><p>比如，要计算<br>$$y = sin(x^2)$$<br>在$x=1$处的导数，首先我们分成几步计算y的值：<br>$$<br>\begin{align}<br>&amp; x_0 = 1 \\<br>&amp; x_1 = x_0^2 = 1 \\<br>&amp; x_2 = sin(x_1) = 0.8415 \\<br>&amp; y = x_2 = 0.8415<br>\end{align}<br>$$<br>计算导数时，只需反过来对每一步求导即可：</p><p>$$<br>\begin{align}<br>&amp; \bar{v_2} = \bar y = 1 \\<br>&amp; \bar{v_1} = \bar{v_2}\frac{dv_2}{dv_1} = \bar{v_2} \times cos(x_1) = 0.8415 \\<br>&amp; \bar{v_0} = \bar{v_1}\frac{dv_1}{dv_0} = \bar{v_1} \times 2x_0 = 1.0806<br>\end{align}<br>$$</p><p>对于这个例子，我们可以很快验证，函数f的导数是：<br>$$<br>\frac{dy}{dx} = cos(x^2)\cdot 2x<br>$$<br>代入x=1，得：<br>$$<br>cos(1)\times 2 = 1.0806<br>$$</p><p>因此，自动微分的好处在于我们不必显示地用微积分的方法求解导数表达式。在caffe2中，我们只需要对每一层的函数编码导数的表达式，整个神经网络表示的大函数的梯度则通过自动微分的方式汇集每一层的导数值得来。</p><p>下面来看看之前介绍的SVM loss和Softmax loss函数的梯度如何计算：</p><h4 id="SVM-Loss的梯度"><a href="#SVM-Loss的梯度" class="headerlink" title="SVM Loss的梯度"></a>SVM Loss的梯度</h4><p>样本i的SVM loss用下式表示：<br>$$L_i=\sum_{j\neq{y_i}} max(0, s_j - s_{y_i} + \Delta) \qquad (7)$$</p><p>由于caffe2框架采用自动微分的方式，所以对于样本i，我们只需要求导到$s_j$即可(即评分函数的输出），不需要一直往前求导，即可以认为$s_j$就是函数的输入变量。显然当$i \neq j$时有：<br>$$<br>\frac{d{L_i}}{d{s_j}} =<br>\begin{cases}<br>0, &amp; s_j - s_{y_i} + \Delta \lt 0 \\<br>1, &amp; s_j - s_{y_i} + \Delta \gt 0 \qquad (8)\\<br>\end{cases}<br>$$<br>当$i == j$时有，<br>$$\frac{d{L_i}}{d{s_j}} = \sum_{j\neq{y_i}}I(0, s_j - s_{y_i} + \Delta) \qquad (9)$$<br>其中，<br>$$<br>I(0, s_j - s_{y_i} + \Delta)=<br>\begin{cases}<br>0, &amp; s_j - s_{y_i} + \Delta \lt 0 \\<br>-1, &amp; s_j - s_{y_i} + \Delta \gt 0  \qquad (10)\\<br>\end{cases}<br>$$</p><p>在caffe2中可以实现如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> SVMLossL1GradientOp&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="comment">// (1)</span></div><div class="line">  <span class="keyword">auto</span>&amp; X = Input(<span class="number">0</span>);  <span class="comment">// predict scores</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* X_data = X.<span class="keyword">template</span> data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">int</span> N, D;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> canonical_axis = X.canonical_axis_index(axis_);</div><div class="line">  N = X.size_to_dim(canonical_axis);  <span class="comment">// batch size</span></div><div class="line">  D = X.size_from_dim(canonical_axis);</div><div class="line"></div><div class="line">  <span class="comment">// (2)</span></div><div class="line">  <span class="keyword">auto</span>&amp; Y = Input(<span class="number">1</span>);  <span class="comment">// ground truth labels</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span>* Y_data = Y.<span class="keyword">template</span> data&lt;<span class="keyword">int</span>&gt;();</div><div class="line">  <span class="comment">// check label dimension</span></div><div class="line">  <span class="keyword">if</span> (Y.ndim() == canonical_axis) &#123;</div><div class="line">    CAFFE_ENFORCE_EQ(Y.size(), N);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    CAFFE_ENFORCE_EQ(Y.size_to_dim(canonical_axis), N);</div><div class="line">    CAFFE_ENFORCE_EQ(Y.size_from_dim(canonical_axis), <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// (3)</span></div><div class="line">  <span class="keyword">auto</span>&amp; d_avg_loss = Input(<span class="number">2</span>);  <span class="comment">// avg_loss grad(gradient from top layer)</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* d_avg_loss_data = d_avg_loss.<span class="keyword">template</span> data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  CAFFE_ENFORCE(d_avg_loss.ndim() == <span class="number">1</span>);</div><div class="line">  CAFFE_ENFORCE(d_avg_loss.dim32(<span class="number">0</span>) == N);</div><div class="line"></div><div class="line">  <span class="comment">//(4)</span></div><div class="line">  <span class="keyword">auto</span>* dX = Output(<span class="number">0</span>);  <span class="comment">// gradient r.s.t predict scores</span></div><div class="line">  dX-&gt;ResizeLike(X);</div><div class="line">  <span class="keyword">float</span>* dX_data = dX-&gt;<span class="keyword">template</span> mutable_data&lt;<span class="keyword">float</span>&gt;();</div><div class="line"></div><div class="line">  <span class="comment">// (5)</span></div><div class="line">  <span class="comment">// calculate gradient for each sample</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">    <span class="comment">// for the class(i) that is not target class(j), the gradient is:</span></div><div class="line">    <span class="comment">// I(max(0, p_i - p_j + \Delta))</span></div><div class="line">    <span class="comment">// for class j, the gradient is:</span></div><div class="line">    <span class="comment">// \sum_i I(max(0, p_i - p_j + \Delta))</span></div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> target_score = X_data[i * D + Y_data[i]];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D; ++j) &#123;</div><div class="line">      <span class="keyword">if</span> (j != Y_data[i]) &#123;</div><div class="line">        <span class="keyword">float</span> loss = X_data[i * D + j] - target_score + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (loss &gt; <span class="number">0</span>) &#123;</div><div class="line">          dX_data[i * D + j] = <span class="number">1</span> * d_avg_loss_data[i];</div><div class="line">          ++cnt;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          dX_data[i * D + j] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    dX_data[i * D + Y_data[i]] = <span class="number">-1</span> * cnt * d_avg_loss_data[i];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里有几点说明(下面的序号对于上面代码中注释的序号）：</p><ul><li>（1）第一个输入X和SVMLoss的输入是一样的，是神经网络上一层的输出，在这里主要是为了获取样本数量（batch size）N以及feature维度D</li><li>（2） 第二个输入Y也和SVMLoss的第二个输入一样，是样本真实的标签</li><li>（3）第三个输入d_avg_loss是下一层的导数传入，一半情况下SVMLoss下一层是一个AveragedLoss层，所以这个值是该层的导数输出</li><li>（4）dX就是我们要求的导数，它的维度和上一层的输入X的维度是一样的</li><li>（5）实际计算导数的过程，注意到是对每一个输入都进行了导数的计算</li></ul><h4 id="SoftMax-Loss的梯度"><a href="#SoftMax-Loss的梯度" class="headerlink" title="SoftMax Loss的梯度"></a>SoftMax Loss的梯度</h4><p>SoftMax函数的形式如下：<br>$$S = \frac{e^{y_i}}{\sum_j{e^{y_j}}} \qquad (11)$$<br>根据导数的除法法则，有：<br>$$<br>\begin{align}<br>\frac{dS}{d{y_i}} &amp; =  \frac{e^{y_i} \cdot \sum_j{e^{y_j}} - e^{y_i} \cdot e^{y_i}}{(\sum_j{e^{y_j}})^2} \\<br>&amp; = \frac{e^{y_i}}{\sum_j{e^{y_j}}} \cdot \frac{\sum_j{e^{y_j}} - e^{y_i}}{\sum_j{e^{y_j}}} \\<br>&amp; =  \frac{e^{y_i}}{\sum_j{e^{y_j}}} \cdot (1 - \frac{e^{y_i}}{\sum_j{e^{y_j}}}) \\<br>&amp; = S \cdot (1 - S) \qquad (12)<br>\end{align}<br>$$<br>可以看出求SoftMax在点x处的导数十分简单，只要知道在x处的函数值就行了。</p><p>下面是caffe2里关于SoftMax导数的实现：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> SoftmaxGradientOp&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="comment">// (1)</span></div><div class="line">  <span class="keyword">auto</span>&amp; Y = Input(<span class="number">0</span>);</div><div class="line">  <span class="comment">// (2)</span></div><div class="line">  <span class="keyword">auto</span>&amp; dY = Input(<span class="number">1</span>);</div><div class="line">  <span class="comment">// (3)</span></div><div class="line">  <span class="keyword">auto</span>* dX = Output(<span class="number">0</span>);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> canonical_axis = Y.canonical_axis_index(axis_);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> N = Y.size_to_dim(canonical_axis);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> D = Y.size_from_dim(canonical_axis);</div><div class="line">  <span class="comment">// First, get scales</span></div><div class="line">  <span class="keyword">if</span> (scale_.size() != N) &#123;</div><div class="line">    scale_.Resize(N);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (sum_multiplier_.size() != D) &#123;</div><div class="line">    sum_multiplier_.Resize(D);</div><div class="line">    math::Set&lt;<span class="keyword">float</span>, CPUContext&gt;(D, <span class="number">1.f</span>, sum_multiplier_.mutable_data&lt;<span class="keyword">float</span>&gt;(),</div><div class="line">                                 &amp;context_);</div><div class="line">  &#125;</div><div class="line">  dX-&gt;ResizeLike(Y);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* Ydata = Y.data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* dYdata = dY.data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">float</span>* dXdata = dX-&gt;mutable_data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  context_.Copy&lt;<span class="keyword">float</span>, CPUContext, CPUContext&gt;(Y.size(), dYdata, dXdata);</div><div class="line">  <span class="keyword">float</span>* scaledata = scale_.mutable_data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="comment">// (4)</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">    math::Dot&lt;<span class="keyword">float</span>, CPUContext&gt;(D, Ydata + i * D, dYdata + i * D,</div><div class="line">                                 scaledata + i, &amp;context_);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// (5)</span></div><div class="line">  math::Gemm&lt;<span class="keyword">float</span>, CPUContext&gt;(CblasNoTrans, CblasNoTrans, N, D, <span class="number">1</span>, <span class="number">-1</span>,</div><div class="line">                                scaledata, sum_multiplier_.data&lt;<span class="keyword">float</span>&gt;(), <span class="number">1</span>,</div><div class="line">                                dXdata, &amp;context_);</div><div class="line">  <span class="comment">// (6)</span></div><div class="line">  math::Mul&lt;<span class="keyword">float</span>, CPUContext&gt;(Y.size(), dXdata, Ydata, dXdata,</div><div class="line">                               &amp;context_);</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>几点说明：</p><ul><li>(1) 这个输入Y就是上面推导的S，即SoftMax函数的输出值，我们只需要这一个输入就可以计算导数dX</li><li>(2) dY是下一层传进来的导数，这一层的导数算出来后要乘以dY</li><li>(3) 需要计算的导数dX，维度和Y是一样的</li><li>(4)(5)(6) 分别计算了$Y\cdot dY$, $dY - Y\cdot dY$以及($dY - Y\cdot dY)\cdot Y$，最后这个式子正是SoftMax的导数与上一层梯度的乘积</li></ul><p>一般而言，Softmax的下一层是Cross-Entropy层：<br>$$L = -log(S_j) \qquad (13)$$<br>其中j是样本i的真实类别。故其导数为：<br>$$\frac{dL}{dS} = -\frac{1}{S_j} \qquad (14)$$<br>caffe2里的实现：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> LabelCrossEntropyGradientOp&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="keyword">auto</span>&amp; X = Input(<span class="number">0</span>);</div><div class="line">  <span class="keyword">auto</span>&amp; label = Input(<span class="number">1</span>);</div><div class="line">  <span class="keyword">auto</span>&amp; dY = Input(<span class="number">2</span>);</div><div class="line">  <span class="keyword">auto</span>* dX = Output(<span class="number">0</span>);</div><div class="line">  <span class="keyword">int</span> N, D;</div><div class="line">  <span class="keyword">if</span> (X.ndim() &gt; <span class="number">1</span>) &#123;</div><div class="line">    N = X.dim32(<span class="number">0</span>);</div><div class="line">    D = X.size_from_dim(<span class="number">1</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    N = <span class="number">1</span>;</div><div class="line">    D = X.dim32(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  CAFFE_ENFORCE(</div><div class="line">      (label.ndim() == <span class="number">1</span>) || (label.ndim() == <span class="number">2</span> &amp;&amp; label.dim32(<span class="number">1</span>) == <span class="number">1</span>));</div><div class="line">  CAFFE_ENFORCE_EQ(label.dim32(<span class="number">0</span>), N);</div><div class="line">  CAFFE_ENFORCE_EQ(dY.ndim(), <span class="number">1</span>);</div><div class="line">  CAFFE_ENFORCE_EQ(dY.dim32(<span class="number">0</span>), N);</div><div class="line">  dX-&gt;ResizeLike(X);</div><div class="line">  math::Set&lt;<span class="keyword">float</span>, CPUContext&gt;(dX-&gt;size(), <span class="number">0.f</span>, dX-&gt;mutable_data&lt;<span class="keyword">float</span>&gt;(),</div><div class="line">                               &amp;context_);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* Xdata = X.data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* dYdata = dY.data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span>* labelData = label.data&lt;<span class="keyword">int</span>&gt;();</div><div class="line">  <span class="keyword">float</span>* dXdata = dX-&gt;mutable_data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">    <span class="comment">// (1)</span></div><div class="line">    dXdata[i * D + labelData[i]] =</div><div class="line">        - dYdata[i] / <span class="built_in">std</span>::max(Xdata[i * D + labelData[i]], kLOG_THRESHOLD());</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意（1）处的实现即是计算式子-14，只不过是多乘以了下一层传递过来的导数。</p><h3 id="梯度下降的变种"><a href="#梯度下降的变种" class="headerlink" title="梯度下降的变种"></a>梯度下降的变种</h3><p>梯度下降算法中，可以以不同的频率更新权重，比如，可以所有的样本都计算一遍以后更新权重，所有样本训练一遍称为一个场景（epoch）；也可以分批次计算，在每批次结束之后再进行权重更新，这种方式称<em>Mini-batch Gradient Decent</em>；还可以每个样本计算一遍后马上进行权重更新，这种方式称为<em>Stochastic Gradient Decent(随机梯度下降)</em>。这三种方式，权重更新的频率越来越快，权重更新得快能够加快收敛的速度，但是也不是越快越好，因为有可能会跳离极小点两边摆动，因为权重更新快也表示了参与计算梯度的样本量减少，导致了算法的不稳定。<br>所以在通常的神经网络中，都会采用<em>Mini-batch Gradient Decent</em>这种方式。这里的mini-batch一般设置为2的指数，比如32，62，128，256等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习的目标是获得一组最优的参数，这些参数决定了评分函数，因此我们要找一个最优的评分函数。实际上通过引入损失函数，我们可以通过最小化损失函数来不断更新评分函数的参数，具体来说，机器学习可以通过一种迭代的技术，使得每一步的迭代之后，损失函数的输出都能减小，因此在有限步迭代之后，损失函数就能达到最小值点（当然这是一个局部最小值）。在每一次迭代之后，我们都会根据损失函数的输出更新评分函数的参数，这样就达到了学习的目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="深度学习" scheme="http://www.cartosquare.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习" scheme="http://www.cartosquare.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="随机梯度下降" scheme="http://www.cartosquare.com/tags/%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
      <category term="求导" scheme="http://www.cartosquare.com/tags/%E6%B1%82%E5%AF%BC/"/>
    
      <category term="链式法则" scheme="http://www.cartosquare.com/tags/%E9%93%BE%E5%BC%8F%E6%B3%95%E5%88%99/"/>
    
      <category term="自动微分" scheme="http://www.cartosquare.com/tags/%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>如何衡量机器学习的好坏</title>
    <link href="http://www.cartosquare.com/2017/11/24/measuse-machine-learning-performance/"/>
    <id>http://www.cartosquare.com/2017/11/24/measuse-machine-learning-performance/</id>
    <published>2017-11-24T11:31:20.000Z</published>
    <updated>2017-11-26T12:11:47.614Z</updated>
    
    <content type="html"><![CDATA[<p>损失函数定义了机器学习的目标，是构建机器学习结构十分重要的一环。通常，损失函数包含数据损失(data loss)和正则化损失(regularization loss)，前者约束评分函数预测的结果要和真实结果尽可能相近，后者约束的是评分函数的参数要尽可能简单，避免过复杂的模型。对于不同的任务（分类、回归等），需要设计不同类型的损失函数，当然使用最多的损失函数就只有常见的几种，下面分别介绍。<br><a id="more"></a></p><h2 id="数据损失"><a href="#数据损失" class="headerlink" title="数据损失"></a>数据损失</h2><h3 id="适用于分类的损失函数"><a href="#适用于分类的损失函数" class="headerlink" title="适用于分类的损失函数"></a>适用于分类的损失函数</h3><p>对于一个N类的分类任务，对于每一个输入的样本，评分函数都会输出一个N维的向量，这个向量表明了该样本对应于某个类的得分（向量的第一个值表明该样本属于第一类的得分，第n个值表明该样本属于第n类的得分），得分最高的那个类别就是电脑预测的类别结果。</p><p>在训练的时候，我们还有每个样本真实的类别数据，通过比较电脑预测的结果和真实结果的差异，我们就能知道电脑预测的好坏，损失函数就是用来做比较差异这件事情的，所以损失函数会以电脑的预测结果和真实的类别结果为输入，输出一个实数值。</p><p>用数学语言总结一下，对于N类的分类任务，对于样本$x_i$，电脑预测的结果，回忆一下上一篇blog，就是评分函数输出的结果：<br>$$s_j = f(x_i,W)_j$$<br>函数f会输出一个N维的得分向量，$f(x_i,W)_j$表示这个向量的第j个元素，即这个样本属于第j类的得分。假设这个样本的真实的类别是$y_i$，那么损失函数是所有样本的损失的平均：</p><p>$$L = \frac{1}{N}\sum_{i=0}^N l_i(f(x_i,W),y_i)$$</p><h4 id="Multiclass-Support-Vector-Machine-loss"><a href="#Multiclass-Support-Vector-Machine-loss" class="headerlink" title="Multiclass Support Vector Machine loss"></a>Multiclass Support Vector Machine loss</h4><p>多类支持向量机损失函数是这样一个损失函数：它希望正确类别的得分比其他类别的得分高于某个固定的值$\Delta$，通常可以将$\Delta$设为1。于是，第i个样本的SVM损失值可以用下面的式子表示：<br>$$L_i=\sum_{j\neq{y_i}} max(0, s_j - s_{y_i} + \Delta)$$<br>其中$s_j$是预测的第j类的得分，$y_i$是样本$x_i$的真实类别, $s_{y_i}$是在真实类别上的得分。注意到这里求和的不包括真实类别的那一项，而是将其它类别的得分与真实类别的得分相减，看是否大于固定值$\Delta$，如果大于的话就累加到loss里去，如果小于的话损失就置为0（说明其他类别的得分都小于真实类别的得分）。<br>下面是在caffe2中的实现代码，关于如何在caffe2中添加自定义层可以参考<a href="https://caffe2.ai/docs/custom-operators.html" target="_blank" rel="external">这里</a>。<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;&gt;</div><div class="line"><span class="keyword">bool</span> SVMLossL1Op&lt;<span class="keyword">float</span>, CPUContext&gt;::RunOnDevice() &#123;</div><div class="line">  <span class="comment">// (1) 设置输入输出</span></div><div class="line">  <span class="keyword">auto</span>&amp; X = Input(<span class="number">0</span>);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">float</span>* Xdata = X.data&lt;<span class="keyword">float</span>&gt;();</div><div class="line"></div><div class="line">  <span class="keyword">auto</span>&amp; labels = Input(<span class="number">1</span>);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span>* labels_data = labels.data&lt;<span class="keyword">int</span>&gt;();</div><div class="line"></div><div class="line">  <span class="keyword">auto</span>* Y = Output(<span class="number">0</span>);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> canonical_axis = X.canonical_axis_index(axis_);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> N = X.size_to_dim(canonical_axis);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> D = X.size_from_dim(canonical_axis);</div><div class="line">  Y-&gt;Resize(N);</div><div class="line">  <span class="keyword">float</span>* Ydata = Y-&gt;mutable_data&lt;<span class="keyword">float</span>&gt;();</div><div class="line"></div><div class="line">  <span class="comment">// （2）获取真实标签所对应的得分</span></div><div class="line">  <span class="keyword">if</span> (correct_class_score_.size() != N) &#123;</div><div class="line">    correct_class_score_.Resize(N);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">float</span>* correct_class_score_data = correct_class_score_.mutable_data&lt;<span class="keyword">float</span>&gt;();</div><div class="line">  math::Select&lt;<span class="keyword">float</span>, CPUContext&gt;(N, D, Xdata, labels_data,</div><div class="line">                                  correct_class_score_data, &amp;context_);</div><div class="line"></div><div class="line">  <span class="comment">// (3) 计算每一个样本的svm损失</span></div><div class="line">  <span class="comment">// sum(max(0, result X - correct_class_score(X) + 1))</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">    Ydata[i] = <span class="number">0.0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D; ++j) &#123;</div><div class="line">      <span class="keyword">if</span> (j != labels_data[i]) &#123;</div><div class="line">        <span class="comment">// sum wrong class margin</span></div><div class="line">        Ydata[i] += <span class="built_in">std</span>::max&lt;<span class="keyword">float</span>&gt;(</div><div class="line">            <span class="number">0.0</span>, Xdata[i * D + j] - correct_class_score_data[i] + <span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li><p>(1) 设置输入和输出。Loss函数有两个输入，一个是评分函数预测的每类的得分，假设共有D类，那么X应该是一个D维的向量，但是通常我们会设置一个batch的数据过网络，假设有N个数据一起过网络，那么X就是$N \times D$维。labels是N个数据真实的标签，是一个N维的变量。Loss函数只有一个输出，是一个N维的向量。</p></li><li><p>(2）获取真实标签所对应的得分。这里对应的是$s_{y_i}$</p></li><li>(3) 计算每一个样本的svm损失。</li></ul><p>多类支持向量机损失函数有一些变种，比如，为了让损失函数便于求导，求和时可以加上平方：<br>$$L_i=\sum_{j\neq{y_i}} max(0, s_j - s_{y_i} + \Delta)^2$$</p><h4 id="Cross-Entropy-loss"><a href="#Cross-Entropy-loss" class="headerlink" title="Cross-Entropy loss"></a>Cross-Entropy loss</h4><p>在理解交叉熵损失函数之前，首先看一下Softmax操作。回想一下SVM loss，它的输入是一个N维的评分向量（N表示总类别数），这里的评分是在实数域上的，也就是说可以是任意的实数。而Softmax操作可以将这N个数归一化到[0,1]之间，并且使这N个数之和为1。这种方式实际上模拟了类别的概率分布，是我们大概可以看出样本属于不同类别的概率（但是实际上这些值并不是真实的概率，也就是说，他们之间的相对大小是有意义的，但是绝对值是无意义的）。交叉熵损失函数可以在Softmax的基础之上定义：<br>$$L_i=-log(\frac{e^{f_{y_i}}}{\sum_j{e^{f_{y_j}}}})$$<br>其中log里面的这部分：<br>$$\frac{e^{f_{y_i}}}{\sum_j{e^{f_{y_j}}}}$$<br>就是Softmax操作。可见交叉熵就是对Softmax的结果做log然后取相反数。<br>交叉熵为什么这么定义，可以从两个角度来理解。<br>首先从信息论的角度来看，在信息论中，两个分布p和q的交叉熵由下式定义：<br>$$H(p,q) = -\sum_{x}p(x)log(q(x))$$<br>回到交叉熵损失函数，假设p(x)是数据的真实分布，q(x)是电脑预测的分布，那么交叉熵损失函数就是希望这两个分布的交叉熵尽可能小。注意到，在交叉熵损失函数里并没有出现q(x)，那是因为对于样本$x_i$,p(x) = [0, …, 1, …, 0]，实际上已经隐含在式子中了(只出现了正确类别的那项，因为只有这项p(x)为1）。<br>另外，p和q的交叉熵还可以表示为p的熵加上p、q之间的KL距离(Kullback-Leibler divergence)：<br>$$H(p,q) = H(p) + D_{KL}(p||q)$$<br>因为 H(p)为0，那么交叉熵实际上等于p和q之间的KL距离，这个距离表示的是两个分布之间的距离。<br>总结一下，交叉熵损失函数希望的是实际分布p和预测分布q能够尽可能地接近。<br>从另一个角度，概率论的角度看，有：<br>$$P(y_i|x_i;W)=\frac{e^{f_{y_i}}}{\sum_j{e^{f_{y_j}}}}$$<br>上式表示的是给定样本$x_i$和参数集合W，这个样本是真实类别$y_i$的概率。因此从概率的角度看，最小化正确类别的负的log似然，可以认为是在做极大似然估计（Maximum Likelihood Estimation, MLE）。<br>首先来看Softmax函数在caffe2中的实现(有删减):<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="comment">// (1)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SoftmaxCPU</span><span class="params">(</span></span></div><div class="line">    CPUContext&amp; context,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> D,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* Xdata,</div><div class="line">    <span class="keyword">float</span>* Ydata,</div><div class="line">    <span class="keyword">float</span>* scale,</div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* sum_multiplier,</div><div class="line">    <span class="keyword">float</span>* rowmax) &#123;</div><div class="line">  math::RowwiseMax&lt;<span class="keyword">float</span>, CPUContext&gt;(N, D, Xdata, rowmax, &amp;context);</div><div class="line">  <span class="comment">// Put the intermediate result X - max(X) into Y</span></div><div class="line">  context.<span class="keyword">template</span> Copy&lt;<span class="keyword">float</span>, CPUContext, CPUContext&gt;(N * D, Xdata, Ydata);</div><div class="line">  <span class="comment">// (2) Subtract the max (for nomuerical reasons)</span></div><div class="line">  math::Gemm&lt;<span class="keyword">float</span>, CPUContext&gt;(</div><div class="line">      CblasNoTrans,</div><div class="line">      CblasNoTrans,</div><div class="line">      N,</div><div class="line">      D,</div><div class="line">      <span class="number">1</span>,</div><div class="line">      <span class="number">-1</span>,</div><div class="line">      rowmax,</div><div class="line">      sum_multiplier,</div><div class="line">      <span class="number">1</span>,</div><div class="line">      Ydata,</div><div class="line">      &amp;context);</div><div class="line">  <span class="comment">// (3) Exponentiation</span></div><div class="line">  math::Exp&lt;<span class="keyword">float</span>, CPUContext&gt;(N * D, Ydata, Ydata, &amp;context);</div><div class="line">  math::Gemv&lt;<span class="keyword">float</span>, CPUContext&gt;(</div><div class="line">      CblasNoTrans, N, D, <span class="number">1</span>, Ydata, sum_multiplier, <span class="number">0</span>, scale, &amp;context);</div><div class="line">  <span class="comment">// (4) Do division</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D; ++j) &#123;</div><div class="line">      Ydata[i * D + j] /= scale[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li><p>(1) Softmax 函数的输入包括一个$N \times D$维的评分矩阵Xdata,其中N为batch size，D为类别数。Ydata是softmax的计算结果。</p></li><li><p>(2) 为了避免数值错误，可以先把每一个样本的评分都减去最大评分。其中 math::Gemm 是General matrix multiply 函数，可以计算两个矩阵相乘。这里是把Xdata减去每一行的最大值放到了Ydata里。</p></li><li><p>(3) 计算$e^{f_{y_i}}$ 和${\sum_j{e^{f_{y_j}}}}$</p></li><li><p>(4) 计算$\frac{e^{f_{y_i}}}{\sum_j{e^{f_{y_j}}}}$</p></li></ul><p>有了Softmax的输出结果，交叉熵只需把真实标签对应下的值求log并取相反数即可：<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">    Ydata[i] = -<span class="built_in">log</span>(<span class="built_in">std</span>::max(Xdata[i * D + labelData[i]], kLOG_THRESHOLD()));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><h3 id="适用于回归的损失函数"><a href="#适用于回归的损失函数" class="headerlink" title="适用于回归的损失函数"></a>适用于回归的损失函数</h3><p>回归任务需要预测一个实数值，比如房价。此时通常用范数来定义损失函数，比如L1、L2范数等。</p><h4 id="L2-Squared-norm"><a href="#L2-Squared-norm" class="headerlink" title="L2 Squared norm"></a>L2 Squared norm</h4><p>L2平方范数描述的是预测值和实际值的L2范数距离,下面是对单个样本的计算公式：<br>$$L_i=||f - y_i||_2^2$$</p><p>L1范数则是把各个维度的差异累加起来：<br>$$L_i=||f - y_i||_1 = \sum_j|f_j - (y_i)_j|$$</p><p>相比于L1范数，L2范数更适合求导，但是L1范数却更鲁棒。<br>从优化方面看，L2范数会比Softmax、SVM loss难优化得多，因此要尽可能地将问题建模为分类问题求解。</p><h3 id="其它损失函数"><a href="#其它损失函数" class="headerlink" title="其它损失函数"></a>其它损失函数</h3><p>除了分类和回归，还有多种属性的分类问题，每个样本可能同时拥有多种属性。这时需要对每一种属性训练一个2类的svm loss。<br>另外，还有所谓的结构化预测问题(Structured prediction)，这里labels可以是图或者树的结构。<br>以后有时间再学习这方面的内容吧。</p><h2 id="正则化损失"><a href="#正则化损失" class="headerlink" title="正则化损失"></a>正则化损失</h2><p>前面介绍的都是data loss，在实际的应用中，通常会再加上正则化损失：<br>$$\lambda R(W)$$</p><p>这里的函数R(W)可以是L2范数（和0向量的L2范数距离），称为L2 regularization<br>$$\frac{1}{2}\lambda W^2$$<br>这里加上的系数是为了求导方便。</p><p>也可以是L1范数，称为L1 regularization：<br>$$\lambda|W|$$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前用的最多的损失函数是带正则化的SVM loss和Cross-Entropy loss，实际上这两种loss是很类似的。前者的loss有一个max的截断，后者更加连续。可以说在不同的场景下有各自的优缺点，遇到实际问题可以都试一试比较一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;损失函数定义了机器学习的目标，是构建机器学习结构十分重要的一环。通常，损失函数包含数据损失(data loss)和正则化损失(regularization loss)，前者约束评分函数预测的结果要和真实结果尽可能相近，后者约束的是评分函数的参数要尽可能简单，避免过复杂的模型。对于不同的任务（分类、回归等），需要设计不同类型的损失函数，当然使用最多的损失函数就只有常见的几种，下面分别介绍。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.cartosquare.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="深度学习" scheme="http://www.cartosquare.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="损失函数" scheme="http://www.cartosquare.com/tags/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    
      <category term="SVMLoss" scheme="http://www.cartosquare.com/tags/SVMLoss/"/>
    
      <category term="SoftMax" scheme="http://www.cartosquare.com/tags/SoftMax/"/>
    
      <category term="CrossEntropy" scheme="http://www.cartosquare.com/tags/CrossEntropy/"/>
    
  </entry>
  
  <entry>
    <title>机器学习有哪些组成部分</title>
    <link href="http://www.cartosquare.com/2017/11/23/components-of-machine-learning/"/>
    <id>http://www.cartosquare.com/2017/11/23/components-of-machine-learning/</id>
    <published>2017-11-23T14:00:10.000Z</published>
    <updated>2017-11-26T12:11:21.031Z</updated>
    
    <content type="html"><![CDATA[<p>从这篇博客开始，我打算写一系列关于深度学习的文章，旨在梳理深度学习的各个相关组成结构，并探索相应的实现细节。每篇文章可能只会涉及比较小的一个idea，并尽量用caffe2这个库去解读/实现。<br><a id="more"></a></p><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>顾名思议，机器学习是让机器进行学习的一门学问。机器学习通过喂给电脑大量的先验知识，让电脑了解数据的分布规律，从而使得电脑具备对数据进行预测的能力。比如，给电脑喂大量带标签的图片（标签表明图片里是什么）之后，我们随便给一个电脑没有看过的图片，它就能够预测这个图片里面是什么。</p><p>总结成数学语言，对于由N个D维训练样本组成的集合 $x_i \in R^D$, 每个样本对应一个标签 $y_i$，其中 $i = 1 … N$, $y_i \in 1 … K$，K是数据的总的标签数。机器学习的目的是让电脑得出一个评分函数（score function）$f: R^D -&gt; R^K$, 这个函数可以把某一个训练样本映射为一个标签。评分函数通常写成下面的形式：<br>$$s_i = f(w, x_i)$$<br>即该函数是样本X的函数，w是这个函数的参数集合。不同的机器学习算法体现在评分函数的不同上。线性分类器的评分函数是一个线性函数，只带两个参数（斜率和偏移），SVM分类器的评分函数则是高维函数，至于神经网络乃至深度卷积神经网络的评分函数就够复杂了，参数可以达到数千万乃至上亿。</p><h2 id="机器学习的组成结构"><a href="#机器学习的组成结构" class="headerlink" title="机器学习的组成结构"></a>机器学习的组成结构</h2><p>通常在电脑完成学习之后，可以用评分函数对新的数据进行预测。但是学习的过程还需要代价函数，或者叫损失函数（Loss function）来辅助。在学习/训练的过程中，损失函数通常放在评分函数之后，以评分函数的输出和真实的标签为输入，计算出一个损失值。通过这个损失值指导评分函数对其参数进行调整。通过不断的学习，电脑就能够找到合适的一组权重参数，使得评分函数的输出值进入到损失函数能得到一个尽可能小的值。这个调整权重参数的过程实际上是最小化损失函数的过程，这里目前用的最多的是梯度下降算法。</p><p>总结一下，机器学习的结构可以分成三部分，第一部分是评分函数，用来模拟人的决策过程；第二部分是损失函数，用来衡量机器的决策和真实决策的差异；第三部分是最小化损失函数的过程，用来调整评分函数的权重。等到训练过程结束，我们便可以单独使用评分函数进行预测。</p><h2 id="接下来的计划-…"><a href="#接下来的计划-…" class="headerlink" title="接下来的计划 …"></a>接下来的计划 …</h2><p>后续的blog将会围绕机器学习的这三部分进行，下面是初步拟定的大纲：</p><ul><li><p>Loss function(svm loss, softmax loss/cross entropy…)</p></li><li><p>Stochastic gradient decent(batch sgd…)</p></li><li><p>Backward propagation(chain-rule, subgradients…)</p></li><li><p>Activation layer</p></li><li><p>Weight initialization</p></li><li><p>Full connected layer(gemm…)</p></li><li><p>Convolutional layer</p></li><li><p>Pool layer</p></li><li><p>Normalization layer</p></li><li><p>CNN case study(alexnet, googlenet, vggnet, resnet…)</p></li><li><p>Upsample layer</p></li><li><p>FCN</p></li><li><p>LSTM</p></li><li><p>SegNet</p></li><li><p>U-Net</p></li><li><p>fast-rcnn/faster-rcnn</p></li><li><p>YOLO</p></li><li><p>SDD</p></li></ul><p>以上列出的是可能会涉及的概念，当然中间还会穿插一些关于影像识别方面的一些具体例子。所有的Blog代码都会基于<a href="https://caffe2.ai/" target="_blank" rel="external">caffe2</a>来开发，这得益于caffe2的高度模块化设计，让我们可以不修改源代码也可以添加自定义的层和相关算法。另外caffe2不仅效率高，而且可以运行在多种设备之上，使得我们的学习代码可以具备工程应用的条件。接下来的所有代码都会放在<a href="https://github.com/cartosquare/caffe2_cpp_tutorial" target="_blank" rel="external">caffe2_cpp_tutoria</a>这个仓库中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从这篇博客开始，我打算写一系列关于深度学习的文章，旨在梳理深度学习的各个相关组成结构，并探索相应的实现细节。每篇文章可能只会涉及比较小的一个idea，并尽量用caffe2这个库去解读/实现。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.cartosquare.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="深度学习" scheme="http://www.cartosquare.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习" scheme="http://www.cartosquare.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Lua 语言</title>
    <link href="http://www.cartosquare.com/2016/11/13/lua-language/"/>
    <id>http://www.cartosquare.com/2016/11/13/lua-language/</id>
    <published>2016-11-13T01:30:09.000Z</published>
    <updated>2017-11-25T08:42:21.379Z</updated>
    
    <content type="html"><![CDATA[<p>最近在忙着做地理方面的机器学习的研究，把博客给荒废了。今天就把最近常用的Lua编程语言做些笔记，方便以后参考。</p><p><a href="http://www.lua.org/" target="_blank" rel="external">Lua</a> 是一门动态类型的脚本语言，具有很强的拓展性，可以和C/C++进行交互。Lua的语法简单、运行十分高效，通常应用于嵌入式程序、C程序，当然也可以单独使用Lua进行程序设计。</p><a id="more"></a><h2 id="安装-Lua"><a href="#安装-Lua" class="headerlink" title="安装 Lua"></a>安装 Lua</h2><ul><li><p>windows<br>使用 <a href="http://luadist.org/" target="_blank" rel="external">LuaDist</a> 进行安装</p></li><li><p>linux</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.3.tar.gz</div><div class="line">tar zxf lua-5.3.3.tar.gz</div><div class="line">cd lua-5.3.3</div><div class="line">make linux test</div></pre></td></tr></table></figure></li><li><p>mac</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.3.tar.gz</div><div class="line">tar zxf lua-5.3.3.tar.gz</div><div class="line">cd lua-5.3.3</div><div class="line">make macosx test</div></pre></td></tr></table></figure></li></ul><p>安装完成后，你可以在命令行中输入 lua 命令进入解释器界面进行编码尝试；也可以在一个文本编辑器中书写代码，保存成文件，比如保存成test.lua，然后再命令行中输入 lua test.lua 执行文件中的代码。</p><p>下面就开始介绍 Lua 语言啦。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>单行注释</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 两个短横线表示一个单行注释</span></div></pre></td></tr></table></figure></li><li><p>块注释</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="comment">--[[</span></div><div class="line">    使用两个短横线和两个方括号</div><div class="line">    表示多行注释</div><div class="line">--]]</div></pre></td></tr></table></figure></li></ul><h2 id="基本变量"><a href="#基本变量" class="headerlink" title="基本变量"></a>基本变量</h2><ul><li><p>nil<br>表示值未定义</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">t = <span class="keyword">nil</span></div></pre></td></tr></table></figure></li><li><p>boolean</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">t = <span class="keyword">false</span></div></pre></td></tr></table></figure></li><li><p>number<br>Lua中所有的数都是double类型的</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">num = <span class="number">42</span></div></pre></td></tr></table></figure></li><li><p>string</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">s1 = <span class="string">'通常用单引号表示字符串'</span></div><div class="line">s2 = <span class="string">"双引号也可以表示字符串"</span></div><div class="line">s3 = <span class="string">[[ 两个方括号</span></div><div class="line">        表示多行的</div><div class="line">        字符串 ]]</div></pre></td></tr></table></figure></li></ul><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li><p>if 语句</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> num &gt; <span class="number">40</span> <span class="keyword">then</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">'over 40'</span>)</div><div class="line"><span class="keyword">elseif</span> s ~= <span class="string">'abc'</span> <span class="keyword">then</span></div><div class="line">    <span class="built_in">io</span>.write(<span class="string">'s is not equal to abc'</span>)</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">'num &lt;= 40 and s == abc'</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li><li><p>while 语句</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">while</span> num &lt; <span class="number">50</span> <span class="keyword">do</span></div><div class="line">    num = num + <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li><li><p>for 语句</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">10</span> <span class="keyword">do</span></div><div class="line">    <span class="built_in">print</span>(i)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> j = <span class="number">100</span>, <span class="number">1</span>, <span class="number">-1</span> <span class="keyword">do</span></div><div class="line">    <span class="built_in">print</span>(j)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li><li><p>and or 语句，类似于其它语言的三元操作符：a?b:c</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">ans = aBoolValue <span class="keyword">and</span> <span class="string">'yes'</span> <span class="keyword">or</span> <span class="string">'no'</span></div></pre></td></tr></table></figure></li><li><p>repeat until 语句</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">repeat</span></div><div class="line">    <span class="built_in">print</span>(num)</div><div class="line">    num = num - <span class="number">1</span></div><div class="line"><span class="keyword">until</span> num == <span class="number">0</span></div></pre></td></tr></table></figure></li></ul><h2 id="方法-Functions"><a href="#方法-Functions" class="headerlink" title="方法(Functions)"></a>方法(Functions)</h2><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span><span class="params">(n)</span></span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">then</span> <span class="keyword">return</span> n <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> fib(n - <span class="number">2</span>) + bib(n - <span class="number">1</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">--闭包和匿名方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">adder</span><span class="params">(x)</span></span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(y)</span></span> <span class="keyword">return</span> x + y <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">a1 = adder(<span class="number">9</span>)</div><div class="line">a2 = adder(<span class="number">36</span>)</div><div class="line"><span class="built_in">print</span>(a1(<span class="number">16</span>))  <span class="comment">--&gt; 25</span></div><div class="line"><span class="built_in">print</span>(a2(<span class="number">64</span>))  <span class="comment">--&gt; 100</span></div><div class="line"></div><div class="line"><span class="comment">-- 方法也是一种类型，可以被赋值</span></div><div class="line">f = <span class="function"><span class="keyword">function</span> <span class="params">(x)</span></span> <span class="keyword">return</span> x * x <span class="keyword">end</span></div></pre></td></tr></table></figure><h2 id="表（Tables）"><a href="#表（Tables）" class="headerlink" title="表（Tables）"></a>表（Tables）</h2><p>Tables是Lua唯一的也是最重要的数据结构，Tables实际上是关联数列。Table中的元素都以键值对的形式组织。</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 一般的键是字符串</span></div><div class="line">t = &#123;key1 = <span class="string">'value1'</span>, key2 = <span class="keyword">false</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">-- 字符串的键可以通过点操作取值</span></div><div class="line"><span class="built_in">print</span>(t.key1)  <span class="comment">-- Prints 'value1'.</span></div><div class="line"></div><div class="line"><span class="comment">--任何非nil的值都可以作为键</span></div><div class="line">u = &#123;[<span class="string">'@!#'</span>] = <span class="string">'qbert'</span>, [&#123;&#125;] = <span class="number">1729</span>, [<span class="number">6.28</span>] = <span class="string">'tau'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">--通过方括号的形式去取值</span></div><div class="line"><span class="built_in">print</span>(u[<span class="number">6.28</span>])  <span class="comment">-- prints "tau"</span></div><div class="line"></div><div class="line"><span class="comment">-- 若不指定键，通常会用默认的int表示，通过这种方式可以表示数组</span></div><div class="line">v = &#123;<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="number">1.21</span>, <span class="string">'gigawatts'</span>&#125;</div><div class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #v <span class="keyword">do</span>  <span class="comment">-- #v is the size of v for lists.</span></div><div class="line">  <span class="built_in">print</span>(v[i])  <span class="comment">-- Indices start at 1 !! SO CRAZY!</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><h2 id="Metatables-and-metamethods"><a href="#Metatables-and-metamethods" class="headerlink" title="Metatables and metamethods"></a>Metatables and metamethods</h2><p>一个Table可以包含一个Metatable来重载操作符行为。<br>下面显示了如何表示复数的相加：<br><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">f1 = &#123;a = <span class="number">1</span>, b = <span class="number">2</span>&#125;  <span class="comment">-- Represents the fraction a/b.</span></div><div class="line">f2 = &#123;a = <span class="number">2</span>, b = <span class="number">3</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">-- This would fail:</span></div><div class="line"><span class="comment">-- s = f1 + f2</span></div><div class="line"></div><div class="line">metafraction = &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">metafraction.__add</span><span class="params">(f1, f2)</span></span></div><div class="line">  <span class="keyword">local</span> sum = &#123;&#125;</div><div class="line">  sum.b = f1.b * f2.b</div><div class="line">  sum.a = f1.a * f2.b + f2.a * f1.b</div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="built_in">setmetatable</span>(f1, metafraction)</div><div class="line"><span class="built_in">setmetatable</span>(f2, metafraction)</div><div class="line"></div><div class="line">s = f1 + f2  <span class="comment">-- call __add(f1, f2) on f1's metatable</span></div></pre></td></tr></table></figure></p><p>可以通过metatable来定义默认的键值对<br><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- An __index on a metatable overloads dot lookups:</span></div><div class="line">defaultFavs = &#123;animal = <span class="string">'gru'</span>, food = <span class="string">'donuts'</span>&#125;</div><div class="line">myFavs = &#123;food = <span class="string">'pizza'</span>&#125;</div><div class="line"><span class="built_in">setmetatable</span>(myFavs, &#123;__index = defaultFavs&#125;)</div><div class="line">eatenBy = myFavs.animal  <span class="comment">-- works! thanks, metatable</span></div></pre></td></tr></table></figure></p><h2 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h2><p>Lua没有类的对象，但是可以通过Table和Metatable来构造。</p><p>Dog类<br><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">Dog = &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog:new</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">local</span> newObj = &#123;sound = <span class="string">'woof'</span>&#125;</div><div class="line">    self.__index = self</div><div class="line">    <span class="keyword">return</span> <span class="built_in">setmetatable</span>(newObj, self)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog:makeSound</span><span class="params">()</span></span></div><div class="line">    <span class="built_in">print</span>(<span class="string">'I say '</span> .. self.sound)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">mrDog = Dog:new()</div><div class="line">mrDog:makeSound() <span class="comment">-- 'I say woof'</span></div></pre></td></tr></table></figure></p><p>Dog:new 和Dog:makeSound这种冒号调用方法的方式可以隐式地传递当前调用对象进入函数，也就是函数体中引用的self。</p><p>继承Dog类<br><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">LoundDog = Dog:new()</div><div class="line"><span class="function"><span class="keyword">function</span> = <span class="title">LoundDog:makeSound</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">local</span> s = self.sound .. <span class="string">' '</span></div><div class="line">    <span class="built_in">print</span>(s .. s .. s)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">seymour = LoundDog:new()</div><div class="line">seymour:makeSound() <span class="comment">-- 'woof woof woof'</span></div></pre></td></tr></table></figure></p><p>LoudDog 得到了 Dog 的变量和函数，并且重新定义了makeSound这个函数。</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>Modules用来分离和共享代码。<br>Modules一般返回一个Table对象。</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- mymod.lua</span></div><div class="line"><span class="keyword">local</span> M = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">sayMyName</span><span class="params">()</span></span></div><div class="line">  <span class="built_in">print</span>(<span class="string">'Hrunkner'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">M.sayHello</span><span class="params">()</span></span></div><div class="line">  <span class="built_in">print</span>(<span class="string">'Why hello there'</span>)</div><div class="line">  sayMyName()</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> M</div></pre></td></tr></table></figure><p>另一个文件可以调用mymod.lua这个模块</p><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">local</span> mod = <span class="built_in">require</span>(<span class="string">'mymod'</span>)  <span class="comment">-- Run the file mod.lua.</span></div><div class="line"></div><div class="line"><span class="comment">-- This works because mod here = M in mod.lua:</span></div><div class="line">mod.sayHello()  <span class="comment">-- Says hello to Hrunkner.</span></div><div class="line"></div><div class="line"><span class="comment">-- This is wrong; sayMyName only exists in mod.lua:</span></div><div class="line">mod.sayMyName()  <span class="comment">-- error</span></div></pre></td></tr></table></figure><p>最后，如果对 Lua 感兴趣，想进一步学习的话，可以下载 <a href="https://pan.baidu.com/s/1qYPH7M8" target="_blank" rel="external">Programming in Lua</a> 进行学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在忙着做地理方面的机器学习的研究，把博客给荒废了。今天就把最近常用的Lua编程语言做些笔记，方便以后参考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lua.org/&quot;&gt;Lua&lt;/a&gt; 是一门动态类型的脚本语言，具有很强的拓展性，可以和C/C++进行交互。Lua的语法简单、运行十分高效，通常应用于嵌入式程序、C程序，当然也可以单独使用Lua进行程序设计。&lt;/p&gt;
    
    </summary>
    
      <category term="程序语言" scheme="http://www.cartosquare.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Lua" scheme="http://www.cartosquare.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>CSS 属性</title>
    <link href="http://www.cartosquare.com/2016/09/26/css/"/>
    <id>http://www.cartosquare.com/2016/09/26/css/</id>
    <published>2016-09-26T13:38:46.000Z</published>
    <updated>2017-11-25T08:39:10.919Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/blogs/html-tags/css.png" alt="html"><br><a id="more"></a></p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><ul><li><p>color<br>前景色</p></li><li><p>background-color<br>背景色</p></li><li><p>opacity<br>透明度</p></li><li><p>颜色指定的三种方式<br>RGB、RGBA；16进制；hsl、hsla（hsl指定色调、饱和度以及明度）。</p></li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="字体术语"><a href="#字体术语" class="headerlink" title="字体术语"></a>字体术语</h3><ul><li><p>衬线字体（SERIF）<br>字符在笔画的末端有一些额外的装饰（称为称线）。通常打印长篇文本时使用衬线字体。包括 Georgia，Times，Times New Roman。</p></li><li><p>无称线字体（SANS-SERIF)<br>字母拥有笔直的线条，设计更为简洁。屏幕分辨率要地于打印分辨率，因此当文本比较小时，屏幕上使用无衬线字体阅读起来会更清晰。包括 Arial， Verdana， Helvetica。</p></li><li><p>等宽字体（MONOSAPCE）<br>每个字母的宽度都相同。因为可以精确地对齐，通常用于显示代码。包括 Courier， Courier New。</p></li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li>font-family<br>指定一组字体，以逗号隔开，如：<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">body &#123;</div><div class="line">    font-family: Geogia, Times, serif;</div><div class="line">&#125;</div><div class="line">h1,h2 &#123;</div><div class="line">    font-family: Arial, Verdana, sans-serif;</div><div class="line">&#125;</div><div class="line">.credits &#123;</div><div class="line">    font-family: &quot;Courier New&quot;, Courier, monospace;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>如上所示，将通用字体名作为一类字体的结尾也是很常见的做法。</p><ul><li><p>font-size<br>可以以像素（px）、百分数(%)、或是EM值（em）为单位。1em相当于一个字母m的宽度。<br>要保证字体以希望的大小出现，最好的方式就是以像素为单位对字体大小进行设置。</p></li><li><p>@font-face<br>可以通过指定下载地址来获得计算机上没有的字体。</p></li><li><p>font-weight<br>取值 normal 或 bold</p></li><li><p>font-style<br>取值 normal 或 italic 或 oblique。其中 italic 是文本以斜体显示；而 oblique 仅仅是把文本倾斜一个角度显示而已。</p></li><li><p>text-transform<br>改变文本的大小写。取值 uppercase 或 lowercase 或 capitalize。</p></li><li><p>text-decoration<br>可取以下值：<br>none：把应用在文本上的装饰线去掉<br>underline：文本底部增加一条实线<br>overline：文本顶部增加一条实线<br>line-through: 用一条实线穿过文字<br>blink：使文本动态闪烁（会招人烦！）</p></li><li><p>line-height<br>行间距。一般而言，垂直的行间距应该要大于文字间距。</p></li><li><p>letter-spacing<br>字距</p></li><li><p>word-spacing<br>单词间距</p></li><li><p>text-align<br>文字对齐方式。可取值 left， right， center， justify。</p></li><li><p>text-indent<br>对首行文本进行缩进。</p></li><li><p>text-shadow<br>创建投影。需要指定三个长度值和一种颜色。第一个长度值表明阴影向左或向右延伸的距离；第二个长度值表明阴影向上或向下延伸的距离；第三个长度值为可选项，用于指定投影的模糊程度；最后一项是投影的颜色值。</p></li><li><p>:first-letter<br>伪元素，指定首字母。</p></li><li><p>:first-line<br>伪元素，指定首行</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">p.intro:first-letter &#123;</div><div class="line">    font-size: 200%;</div><div class="line">&#125;</div><div class="line">p.intro.first-line &#123;</div><div class="line">    font-weight: bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>:link<br>未访问过的链接</p></li><li><p>:visited<br>访问过的链接</p></li><li><p>:hover<br>光标悬停其上的元素</p></li><li><p>:active<br>用户单击的元素</p></li><li><p>:focus<br>占据焦点的元素</p></li></ul><h2 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h2><p>每一个元素都是一个矩形的盒子。</p><ul><li><p>width，height<br>控制盒子大小</p></li><li><p>min-width，max-width<br>限制盒子宽度</p></li><li><p>min-height, max-height<br>限制盒子高度</p></li><li><p>overflow<br>内容溢出盒子的处理方式：hidden，scroll</p></li><li><p>border-width<br>盒子边框宽度</p></li><li><p>border-style<br>边框样式：solid, dotted, dashed, double, groove, ridge, insert, outset, hidden/none<br>可以用下面的属性对各个方向的边框样式单独设置：<br>border-top-style<br>border-left-style<br>border-right-style<br>border-bottom-style</p></li><li><p>border-color<br>边框颜色。也可以对各个方向的边框分别设置颜色。</p></li><li><p>border<br>同时指定边框的宽度，样式和颜色</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">p &#123;</div><div class="line">    width: 250px;</div><div class="line">    border: 3px dotted #0088dd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>padding<br>内边距：元素内容与元素边框之间的距离。可以用下面的属性分别指定各个方向上的内边距：<br>padding-top<br>padding-right<br>padding-bottom<br>padding-left<br>也可以用 padding 这个属性快速指定（以上、右、下、左的顺序）</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">padding: 10px 5px 3px 1px;</div></pre></td></tr></table></figure></li><li><p>margin<br>外边距：盒子之间的距离。不同方向的指定参照 padding。<br>指定 left-margin 和 right-margin 分别为 auto 可以使盒子居中显示。</p></li><li><p>display<br>允许将一个内联元素转换为块级元素，反之亦然。取值：<br>inline：使块级元素表现得像内联元素。<br>block：使内联元素表现得像块级元素。<br>inline-block：使块级元素像内联元素那样浮动并保持其它块级元素的特征。<br>none：将一个元素从页面上隐藏。页面上会像没有这个元素一样。</p></li><li><p>visibility<br>从用户视线中隐藏盒子，但保留了盒子原来占用的空间。取值：<br>hidden：隐藏元素。<br>visible：显示元素<br>注意和 display 的区别。</p></li><li><p>border-image<br>设定边框图像</p></li><li><p>box-shadow<br>在盒子周围添加投影</p></li><li><p>border-radius<br>在盒子上创建圆角（指定一个半径）<br>创建椭圆形（指定两个半径）</p></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>list-style-type<br>项目列表样式。<br>对于无序列表，可以取值：<br>none，disc，circle，square<br>对于有序列表，可以取值：<br>decimal， decimal-leding-zero，lower-alpha， upper-alpha， lower-roman， upper-roman</p></li><li><p>list-style-image<br>使用图片作为项目列表符号</p></li><li><p>list-style-position<br>默认情况下，列表会缩进到页面中。该属性用于表示标记显示的位置，是在包含主题内容的盒子内部，还是在其外部：outside， inside。</p></li><li><p>list-style<br>使用这个属性可以同时指定列表的位置和样式。</p></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li><p>width</p></li><li><p>padding<br>单元格与其内容之间的空隙</p></li><li><p>text-transform</p></li><li><p>letter-spacing，font-size<br>用于为表格标题内容增加额外的样式</p></li><li><p>border-top, border-bottom<br>用于设置表格标题上方和下方的边框</p></li><li><p>text-align<br>设置左右对齐</p></li><li><p>background-color<br>用于交替改变表格行的背景颜色</p></li><li><p>:hover<br>用户把光标停在某个单元格时高亮显示</p></li><li><p>empty-cells<br>设置空单元格的边框，取值：<br>show，hide，inherit</p></li><li><p>border-spacing, border-collapse<br>设置单元格之间的间隙</p></li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="文本框样式"><a href="#文本框样式" class="headerlink" title="文本框样式"></a>文本框样式</h3><ul><li><p>font-size<br>用户输入文本大小</p></li><li><p>color<br>文本颜色</p></li><li><p>background-color<br>文本输入框颜色</p></li><li><p>border<br>文本输入框边框</p></li><li><p>background-image<br>为盒子增加背景图像</p></li></ul><h3 id="提交按钮样式"><a href="#提交按钮样式" class="headerlink" title="提交按钮样式"></a>提交按钮样式</h3><ul><li><p>color<br>控制文本按钮颜色</p></li><li><p>text-shadow<br>显示3D效果文本</p></li><li><p>border-bottom<br>使按钮下方边框稍微粗一点，从而使3D效果更逼真</p></li><li><p>background-color</p></li><li><p>:hover<br>鼠标悬停按钮之上</p></li></ul><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul><li>position</li></ul><p>三种用于控制页面布局的定位机制：<br><strong>普通流</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">position:static</div></pre></td></tr></table></figure></p><p>每个块级元素都换行显示，以至于页面中的每个项目都显示在前一个项目的下面。即使指定了盒子的宽度，并且也有足够的空间让两个元素并排显示，但是他们还是不会出现在一起。这是浏览器的默认行为。</p><p><strong>相对定位</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">position:relative</div></pre></td></tr></table></figure></p><p>把一个元素从它在普通流中所处的位置进行上、下、左、右的移动。这种移动不会影响周围元素的位置，他们还是处于普通流中所处的位置。</p><p>通过制定 top，left，right，bottom 属性可以把一个元素以其在普通流中所处的位置为起点进行移动。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">p.example &#123;</div><div class="line">    position: relative;</div><div class="line">    top: 10px;</div><div class="line">    left: 100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>绝对定位</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">position:absolute</div></pre></td></tr></table></figure></p><p>绝对定位的元素的位置相对于它包含的元素。它完全脱离了普通流，也就是说不会影响到周围任何元素的位置。使用绝对定位的元素随着页面的滚动而移动。</p><p>盒子的位移属性 top，left，right，bottom 用于指定元素相对于它的包含元素应该显示什么位置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">h1 &#123;</div><div class="line">    position: absolute;</div><div class="line">    top: 0px;</div><div class="line">    left: 500px;</div><div class="line">    width: 250px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在上面的例子中，h1元素被定位于页面顶端并距离页面左侧边缘500像素的位置。</p><p><strong>固定定位</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">position:fixed</div></pre></td></tr></table></figure></p><p>固定定位是绝对定位的一种形式，与相对于包含元素的定位不同，他是将元素相对于浏览器窗口进行定位。固定定位的元素不会影响周围元素的位置，而且当页面上下滚动时，它不会移动。</p><ul><li>z-index<br>当使用相对定位、固定定位或者绝对定位时，盒子是可以重叠的，这时可以使用 z-index 元素指定层次。数值越大，元素的层次越靠前。</li></ul><ul><li><p>float<br>float 属性允许将普通流中的元素在它的包含元素内尽可能地向左或向右排列。<br><strong>位于包含元素中的其它内容会在浮动元素的周围流动。</strong></p></li><li><p>clear<br>用来清楚某一侧的浮动元素，取值：<br>left，right，both，none</p></li><li><p>可以用并排的float元素创建并排布局</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.column1, .column2, .column3 &#123;</div><div class="line">    width: 300px;</div><div class="line">    float: left;</div><div class="line">    margin: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li><p>通用型选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">* &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>类型选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">h1, h2,h3 &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>类选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.note &#123;&#125;</div><div class="line">p.note &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>ID选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#intro &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>子元素选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">li&gt;a &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>后代选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">p a &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>相邻兄弟选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">h1+p &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>普通兄弟选择器</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">h1~p &#123;&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blogs/html-tags/css.png&quot; alt=&quot;html&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="程序语言" scheme="http://www.cartosquare.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="CSS" scheme="http://www.cartosquare.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML 标签</title>
    <link href="http://www.cartosquare.com/2016/09/24/html-tags/"/>
    <id>http://www.cartosquare.com/2016/09/24/html-tags/</id>
    <published>2016-09-24T13:38:46.000Z</published>
    <updated>2017-11-25T08:39:07.007Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/blogs/html-tags/html.png" alt="html"><br><a id="more"></a></p><h2 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h2><ul><li><p>body<br>body 元素中的所有内容都会显示在浏览器的主窗口中</p></li><li><p>head<br>包含页面的一些信息，比如标题等</p></li><li><p>title<br>页面标题，通常位于 head 内。</p></li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="结构化标签"><a href="#结构化标签" class="headerlink" title="结构化标签"></a>结构化标签</h3><p>结构化标签会影响网页的结构。</p><ul><li><p>h1, h2, h3, h4, h5, h6<br>标题</p></li><li><p>p<br>段落</p></li><li><p>b<br>粗体</p></li><li><p>i<br>斜体</p></li><li><p>sup<br>上标</p></li><li><p>sub<br>下标</p></li><li><p>br<br>换行</p></li><li><p>hr<br>分割线</p></li></ul><h3 id="语义标签"><a href="#语义标签" class="headerlink" title="语义标签"></a>语义标签</h3><p>语义标签不影响网页的结构，却可以为页面添加额外的信息。</p><ul><li><p>strong<br>表示十分重要。默认浏览器中显示为粗体。</p></li><li><p>em<br>起强调作用。默认浏览器中显示为斜体。</p></li><li><p>blockquote<br>标记较长的引用。默认浏览器会对 blockquote 中的内容进行缩进。</p></li><li><p>q<br>标记较短引用</p></li><li><p>abbr<br>缩写。通过指定 title 属性来指明全称。鼠标移上去时会动态显示。</p></li><li><p>cite<br>标明引用来源。浏览器会显示为斜体。</p></li><li><p>dfn<br>解释新术语</p></li><li><p>address<br>包含网站设计者的联系详情。通常显示为斜体。</p></li><li><p>ins<br>显示已经插入到文档中的内容。通常带有下划线。</p></li><li><p>del<br>显示已经从文档中被删除的内容。通常带有删除线。</p></li><li><p>s<br>显示不准确或不相关却不应当予以删除的内容。通常带有从中穿过的线条。</p></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>ol<br>有序列表，其中的每个项目用 li 元素表示。</p></li><li><p>ul<br>无序列表，其中的每个项目用 li 元素表示。</p></li><li><p>dl<br>定义列表，用成对的 dt 和 dd 元素来表示被定义的术语及相应的定义。</p></li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><p>a<br>用 href 属性来指明要链接的目标页面。<br>当链接到另一个网站时，href 的值必须是绝对 URL；当链接到同一网站的目标页面时，href 的值可以是相对 URL。同一个网站不同页面的相对 URL 类似于文件系统中不同文件的相对位置，实际上，二者没有本质区别。</p></li><li><p>mailto:<br>在 a 标签中的 href 属性中指定 mailto: 后跟一个邮箱名称时，单击链接会启动 email 程序，并自动添加连接中指定的 email 地址为收件人。</p></li><li><p>target<br>在 a 标签中指定 target 属性为 _blank 时可以在新窗口中打开链接。<br>一般情况下，要尽量避免在新窗口中打开链接，除非是跳转到其它的网站。</p></li><li><p>#id<br>在 a 标签中的 href 属性中用 # 后跟某元素的 id 时，会跳转到页面内的这个元素。在跳转到其它页面时，如果在原来的 URL 后用这种方式指定元素，也可以跳转到其它页面的某个元素。</p></li></ul><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><ul><li><p>img<br>img 标签要指定几个属性：<br>src：图像地址<br>alt：对于图像的说明<br>titile：图像名称，鼠标悬停在图像上方时会显示<br>height,width: 图像大小<br>应该根据图像在网页上显示的大小来保存图像；照片最好保存为JPEG格式。</p></li><li><p>figure<br>用来包含图像以及对图像的说明。其中图像说明用 figcaption 来指定。</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;figure&gt;</div><div class="line">&lt;img src=&quot;images/nice.jpg&quot; alt=&quot;beautiful scene&quot;&gt;</div><div class="line">&lt;br /&gt;</div><div class="line">&lt;figcaption&gt;How beautiful it is!&lt;/figcaption&gt;</div><div class="line">&lt;/figure&gt;</div></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li><p>table<br>创建表格。</p></li><li><p>tr<br>表格内的每一行。</p></li><li><p>td<br>表格内每一行内的每一个单元格。通过指定 colspan 或者 rowspan 单元格可以跨列或者跨行。</p></li><li><p>th<br>和 td 用法一样，但它的作用是表示列或行的标题。用 scope 的属性来指定（可以赋值为 row 或 col）。</p></li><li><p>thead<br>表格的内容应放在 thead 中。</p></li><li><p>tbody<br>表格的主体部分应放在 tbody 元素中。</p></li><li><p>tfoot<br>表格的脚注应放在 tfoot 元素中。</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;table&gt;</div><div class="line">&lt;thead&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;th&gt;&lt;/th&gt;</div><div class="line">        &lt;th scope=&quot;col&quot;&gt;列标题一&lt;/th&gt;</div><div class="line">        &lt;th scope=&quot;col&quot;&gt;列标题二&lt;/th&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">&lt;/thead&gt;</div><div class="line">&lt;tbody&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;th scope=&quot;row&quot;&gt;行标题一&lt;/th&gt;</div><div class="line">        &lt;td&gt;列值一&lt;/td&gt;</div><div class="line">        &lt;td&gt;列值二&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;th scope=&quot;row&quot;&gt;行标题二&lt;/th&gt;</div><div class="line">        &lt;td&gt;列值一&lt;/td&gt;</div><div class="line">        &lt;td&gt;列值二&lt;/td&gt;</div><div class="line">        &lt;th scope=&quot;row&quot;&gt;行标题二&lt;/th&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;!-- 其它行 ... --&gt;</div><div class="line">&lt;/tbody&gt;</div><div class="line">&lt;tfoot&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;td&gt;&lt;/td&gt;</div><div class="line">        &lt;td colspan=&quot;2&quot;&gt;表格脚注&lt;/td&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">&lt;/tfoot&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>form<br>表单位于 form 元素中。action 属性来指定响应的 URL。method 来指定提交的方式：get 或 post。</li></ul><h3 id="添加文本"><a href="#添加文本" class="headerlink" title="添加文本"></a>添加文本</h3><ul><li><p>input type=”text”<br>添加单行文本。</p></li><li><p>input type=”password”<br>添加隐藏单行文本。</p></li><li><p>textarea<br>添加多行文本。</p></li></ul><h3 id="进行选择"><a href="#进行选择" class="headerlink" title="进行选择"></a>进行选择</h3><ul><li><p>input type=”radio”<br>单选按钮。</p></li><li><p>input type=”checkbox”<br>复选框。</p></li><li><p>select<br>下拉列表框。通过 option 子标签来设置选项。<br>通过设置 multiple 选项可以设置多选框。</p></li></ul><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><ul><li><p>input type=”submit”<br>提交按钮。</p></li><li><p>input type=”image”<br>图像提交按钮。</p></li></ul><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><ul><li>input type=”file”<br>上传文件。</li></ul><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><ul><li>button<br>可以结合文本和图像。</li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul><li>label<br>可以用两种方式使用标签：1. 将文本说明和表单输入框全部包围起来；2. 与表单控件分开，但是通过 for 属性来指定表单空间的 id。</li></ul><h3 id="组合表单"><a href="#组合表单" class="headerlink" title="组合表单"></a>组合表单</h3><ul><li><p>fieldset<br>组合多个控件；会有一个外边框围起来。</p></li><li><p>legend<br>可以指定多个控件的组合的标题。</p></li></ul><h3 id="其它控件"><a href="#其它控件" class="headerlink" title="其它控件"></a>其它控件</h3><ul><li><p>input type=”date”<br>日期控件。</p></li><li><p>input type=”email”<br>邮箱输入。</p></li><li><p>input type=”url”<br>网页地址输入。</p></li><li><p>input type=”search”<br>搜索输入。</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;form action=&quot;http://www.example.com/review.php&quot; method=&quot;get&quot;&gt;</div><div class="line">    &lt;fieldset&gt;</div><div class="line">        &lt;legend&gt;你的详细信息：&lt;/legend&gt;</div><div class="line">        &lt;label&gt;Name:</div><div class="line">            &lt;input type=&quot;text&quot; name=&quot;name&quot; size=&quot;30&quot; maxlength=&quot;100&quot;&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">        &lt;label&gt;Email:</div><div class="line">            &lt;input type=&quot;email&quot; name=&quot;email&quot; size=&quot;30&quot; maxlength=&quot;100&quot;&gt;</div><div class="line">        &lt;/label&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">    &lt;/fieldset&gt;</div><div class="line">    &lt;br /&gt;</div><div class="line">    &lt;fieldset&gt;</div><div class="line">        &lt;legend&gt;你的调查：&lt;/legend&gt;</div><div class="line">        &lt;p&gt;</div><div class="line">            &lt;label for=&quot;hear-about&quot;&gt;你是怎么知道我们的？&lt;/label&gt;</div><div class="line">            &lt;select name=&quot;referrer&quot; id=&quot;hear-about&quot;&gt;</div><div class="line">                &lt;option value=&quot;google&quot;&gt;Google&lt;/option&gt;</div><div class="line">                &lt;option value=&quot;friend&quot;&gt;朋友&lt;/option&gt;</div><div class="line">                &lt;option value=&quot;other&quot;&gt;其它&lt;/option&gt;</div><div class="line">            &lt;/select&gt;</div><div class="line">        &lt;/p&gt;</div><div class="line">        &lt;p&gt;</div><div class="line">            你会继续来访吗？</div><div class="line">            &lt;br /&gt;</div><div class="line">            &lt;label&gt;</div><div class="line">                &lt;input type=&quot;radio&quot; name=&quot;rating&quot; value=&quot;yes&quot;/&gt;</div><div class="line">                是的</div><div class="line">            &lt;/label&gt;</div><div class="line">            &lt;label&gt;</div><div class="line">                &lt;input type=&quot;radio&quot; name=&quot;rating&quot; value=&quot;no&quot;/&gt;</div><div class="line">                不会</div><div class="line">            &lt;/label&gt;</div><div class="line">            &lt;label&gt;</div><div class="line">                &lt;input type=&quot;radio&quot; name=&quot;rating&quot; value=&quot;maybe&quot;/&gt;</div><div class="line">                也许</div><div class="line">            &lt;/label&gt;</div><div class="line">        &lt;/p&gt;</div><div class="line">        &lt;p&gt;</div><div class="line">            &lt;label for=&quot;comments&quot;&gt;想对我们说的：&lt;/label&gt;</div><div class="line">            &lt;br /&gt;</div><div class="line">            &lt;textarea rows=&quot;4&quot; cols=&quot;40&quot; id=&quot;comments&quot;&gt;</div><div class="line">            &lt;/textarea&gt;</div><div class="line">        &lt;/p&gt;</div><div class="line">        &lt;label&gt;</div><div class="line">            &lt;input type=&quot;checkbox&quot; name=&quot;subscribe&quot; checked=&quot;checked&quot; /&gt;</div><div class="line">            订阅邮件</div><div class="line">        &lt;/label&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</div><div class="line">    &lt;/fieldset&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>白色空间折叠：浏览器忽视空白和断行。</li><li>id 特性：同一个页面内元素 id 是唯一的。</li><li>class 特性：多个元素可以属于一个 class 。</li><li>某些元素总是会另起一行，称为<em>块级元素</em>，比如 h1，p， ul 以及 li 等。</li><li>有些元素出现时总是和邻近的元素在同一行，称为<em>内联元素</em>，比如 a，b，em 以及 img 等。</li><li>div 元素可以将文本和元素集中在一个块级元素中。</li><li>span 元素就像是 div 元素的内联版本。</li><li>iframe 内联框架。页面内的一个小窗口。</li><li><p>meta 元素用来指定页面信息。如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;页面的信息&lt;/title&gt;</div><div class="line">        &lt;meta name=&quot;description&quot; content=&quot;个人博客&quot; /&gt;</div><div class="line">        &lt;meta name=&quot;keywords&quot; content=&quot;个人 博客 地图&quot; /&gt;</div><div class="line">        &lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot; /&gt;</div><div class="line">        &lt;meta http-equiv=&quot;author&quot; content=&quot;atlas&quot; /&gt;</div><div class="line">        &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot; /&gt;</div><div class="line">        &lt;meta http-equiv=&quot;expires&quot; content=&quot;Fri, 23 Apr 2017 23:12:34 GMT&quot; /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li><li><p>转义字符</p><ul><li><p>小于号：&lt; </p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;lt;</div></pre></td></tr></table></figure></li><li><p>大于号：&gt;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;gt;</div></pre></td></tr></table></figure></li><li><p>And符号：&amp;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;amp;</div></pre></td></tr></table></figure></li><li><p>双引号：&quot;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;quot;</div></pre></td></tr></table></figure></li><li><p>美分符号：&cent;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;cent;</div></pre></td></tr></table></figure></li><li><p>英镑符号：&pound;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;pound;</div></pre></td></tr></table></figure></li><li><p>日元符号：&yen;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;yen;</div></pre></td></tr></table></figure></li><li><p>欧元符号：&euro;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;euro;</div></pre></td></tr></table></figure></li><li><p>版权符号：&copy;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;copy;</div></pre></td></tr></table></figure></li><li><p>注册商标：&reg;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;reg;</div></pre></td></tr></table></figure></li><li><p>商标：&trade;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;trade;</div></pre></td></tr></table></figure></li><li><p>左单引号：&lsquo;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;lsquo;</div></pre></td></tr></table></figure></li><li><p>右单引号：&rsquo;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;rsquo;</div></pre></td></tr></table></figure></li><li><p>左双引号：&ldsquo;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;ldsquo;</div></pre></td></tr></table></figure></li><li><p>右双引号：&rdsquo;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;rdsquo;</div></pre></td></tr></table></figure></li><li><p>乘号：&times;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;times;</div></pre></td></tr></table></figure></li><li><p>除号：&divide;</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&amp;divide;</div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blogs/html-tags/html.png&quot; alt=&quot;html&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="程序语言" scheme="http://www.cartosquare.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="HTML" scheme="http://www.cartosquare.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>计算机中的数学二：数论和加密算法</title>
    <link href="http://www.cartosquare.com/2016/09/15/number-theory-and-rsa-algorithm/"/>
    <id>http://www.cartosquare.com/2016/09/15/number-theory-and-rsa-algorithm/</id>
    <published>2016-09-15T13:10:54.000Z</published>
    <updated>2016-09-16T02:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们使用 git 同步代码，ssh 远程登录虚拟机、使用数字签名、加密哈希函数以及电子支付系统时，都会用到公钥加密系统，而支撑起公钥加密系统的理论便是数论。</p><p>数论是关于整数的理论，首先来了解一些基本的概念和理论，然后再看看前人为实现安全加密做出的努力，最后再介绍现在广泛使用的 RSA 公钥加密算法。</p><a id="more"></a><h2 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h2><p>定义：a 整除 b，当且仅当存在某个整数k，使得 $ak = b$。<br>通常用符号 $a | b$ 来表示 a 整除 b。根据定义，如果 $a | b$，那么 b 就是 a 的整数倍。从这个定义可以得出，任何整数都可以整除 0。</p><h3 id="关于整除的一些引理"><a href="#关于整除的一些引理" class="headerlink" title="关于整除的一些引理"></a>关于整除的一些引理</h3><ul><li>如果 $a | b$，那么对于任意 c，都有 $a | bc$</li><li>如果 $a | b$ 并且 $b | c$， 那么 $a | c$</li><li>如果 $a | b$ 并且 $a | c$，那么对于任意 s 和 t 都有 $a | sb + tc$</li><li>对于任意 $c \neq 0$, $a | b$ 当且仅当 $ca | cb$</li></ul><h3 id="当无法整除的时候-…"><a href="#当无法整除的时候-…" class="headerlink" title="当无法整除的时候 …"></a>当无法整除的时候 …</h3><p>整除定理：令 n 和 d 为整数且$d \gt 0$，存在唯一的一对整数 q 和 r，使得：</p><p>$$n = q \cdot d + r \;AND\; 0 \le r \lt d$$</p><p>其中 q 称为 n 被 d 除的<em>商</em>，而 r 称为 n 被 d 除的<em>余数</em>。接下来我们用 $qcnt(n, d)$ 和 $rem(n, d)$ 分别表示这两者。举个栗子，$qcnt(2716, 10) = 271$ , $rem(2716, 10) = 6$，因为 $2716 = 271 * 10 + 6$</p><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><p>a 和 b 的最大公约数是指能同时整除 a 和 b 的最大整数，通常用符号 $gcd(a,b)$表示。（gcd 是 greatest common divisor 的缩写）。比如，$gcd(18,24) = 6$</p><h3 id="最大公约数和线性组合"><a href="#最大公约数和线性组合" class="headerlink" title="最大公约数和线性组合"></a>最大公约数和线性组合</h3><p>定理：a 和 b 的最大公约数是 a 和 b 可能的线性组合中最小的一个。<br>比如，54和44的最大公约数是4，显然4是52和44的一个线性组合：</p><p>$$6 \cdot 52 + (-7) \cdot 44 = 4$$</p><p>并且，52和44的其它线性组合没有比4更小的。</p><p>推论：一个整数是 a 和 b 的线性组合，当且仅当它是 $gcd(a,b)$ 的倍数<br>推论：假设我们有两个容量分别为 a 和 b 的容器，每个容器里能准确量出的水量永远是 a 和 b 的线性组合，也即是 a 和 b 的最大公约数的倍数。</p><h3 id="最大公约数的性质"><a href="#最大公约数的性质" class="headerlink" title="最大公约数的性质"></a>最大公约数的性质</h3><ul><li>每一个能整除 a 和 b 的数都能整数 $gcd(a,b)$</li><li>对于任意 $k&gt;0$, 都有 $gcd(ka,kb) = k \cdot gcd(a,b)$</li><li>如果 $gcd(a,b) = 1$，并且 $gcd(a,c) = 1$，那么 $gcd(a, bc) = 1$</li><li>如果 $a | bc$，并且 $gcd(a,b) = 1$，那么 $a | c$</li><li>$gcd(a, b) = gcd(b, rem(a, b))$</li></ul><p>其中第5点性质需要特别注意，它指导我们如何快速地计算两个数的最大公约数。比如：<br>$$gcd(28, 21) = gcd(21, rem(28,21)) = gcd(21, 7) = gcd(7, rem(21, 7)=gcd(7,0) = 7$$</p><h2 id="算术基本定理"><a href="#算术基本定理" class="headerlink" title="算术基本定理"></a>算术基本定理</h2><p>算术基本定理：每一个正整数都可以写成唯一的由质数相乘的形式：<br>$$n = p_1 \cdot p_1 \cdot p_2 \cdot \cdot \cdot p_j \; (p_1 \lt p_1 \lt p_2 \cdot \cdot \cdot \lt p_j)$$</p><p>这个定理告诉我们，每一个正整数都可以由一组质数相乘得到。</p><h2 id="求余运算"><a href="#求余运算" class="headerlink" title="求余运算"></a>求余运算</h2><p>同余的定义：a 和 b 对 n 做求模操作是同余的，当且仅当 $n | (a - b)$，这可以写成：<br>$$a\equiv b\pmod n$$</p><p>显然，当 a 和 b 的差能被 n 整除，那么 a 和 b 对 n 求模就没差异了，因为求模过程中要减去尽可能多的 n，而 a，b刚好相差整数个 n。</p><p>比如，$29 \equiv 15 \pmod 7$，因为 $7 | (29 - 15)$</p><p>同余和余数之间的关系：$a\equiv b\pmod n$ 当且仅当 $rem(a, n) = rem(b, n)$</p><p>另一个推论：$a \equiv rem(a, n) \pmod n$<br>下面是一些同余的其它性质：</p><ul><li>$a \equiv a \pmod n$</li><li>如果 $a \equiv b \pmod n$，那么 $b \equiv a \pmod n$</li><li>如果 $a \equiv b \pmod n$ 并且 $b \equiv c \pmod n$，那么 $a \equiv c \pmod n$</li><li>如果 $a \equiv b \pmod n$，那么 $a + c \equiv b + c \pmod n$</li><li>如果 $a \equiv b \pmod n$，那么 $ac \equiv bc \pmod n$</li><li>如果 $a \equiv b \pmod n$ 并且 $c \equiv d \pmod n$，那么 $a+c \equiv b+d \pmod n$</li><li>如果 $a \equiv b \pmod n$ 并且 $c \equiv d \pmod n$，那么 $ac \equiv bd \pmod n$</li></ul><h2 id="质数求模算术"><a href="#质数求模算术" class="headerlink" title="质数求模算术"></a>质数求模算术</h2><h3 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h3><p>数 x 的乘法逆元表示为 $x^{-1}$，且有<br>$$x \cdot x^{-1} = 1$$<br>有一个例外是0没有逆元。实际上，乘法逆元是作用于实数域中的，比如 $3 * \frac 1 3 = 1$，而一个整数的逆元不可能还是一个整数。</p><p>然而，在求模运算中，整数的逆元还可能是整数！比如，假设5是模数，那么 3 就是 7 的乘法逆元，因为：<br>$$7 \cdot 3 \equiv 1 \pmod 5$$</p><p>事实上，所有以5为模数，和3同余的数都是7的乘法逆元。</p><p>引理：如果 p 是质数，并且 k 不是 p 的整数倍，那么以 p 为模数，k 存在乘法逆元。</p><h3 id="相消"><a href="#相消" class="headerlink" title="相消"></a>相消</h3><p>实数算术的一个特点是可以消除公约数，换句话说，如果 $m_1k=m2k$，且 $k \neq 0$，那么我们可以消去 k，得到 $m_1 = m_2$。然而，在求模算术中，消除公约数却是不允许的，比如：<br>$$2\cdot3 \equiv 4 \cdot 3 \pmod 6$$<br>消除3，上式就不成立了。然而，当模数是质数时，消除却是成立的。</p><p>引理：假设 p 是一个质数，并且 k 不是 p 的倍数。那么：<br>如果 $ak \equiv bk \pmod p$，就有 $a \equiv b \pmod p$</p><p>引理：假设 p 是一个质数，并且 k 不是 p 的倍数。那么序列：</p><p> $$rem(1\cdot k, p), rem(2\cdot k, p), …, rem(((p-1)\cdot k), p)$$</p><p> 是下面序列的一个排序：<br>$$1, 2, …, (p - 1) $$</p><p>也即这两个序列相等，只是元素的顺序不同。</p><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>费马小定理：假设 p 是一个质数，k不是 p 的倍数，那么：<br>$$k^{p-1} \equiv 1 \pmod p$$</p><p>根据费马小定理，有：<br>$$k^{p-2} \cdot k \equiv 1 \pmod p$$<br>因此，$k^{p-2}$一定是 k 的乘法逆元</p><h2 id="任意模量的算术"><a href="#任意模量的算术" class="headerlink" title="任意模量的算术"></a>任意模量的算术</h2><h3 id="互质"><a href="#互质" class="headerlink" title="互质"></a>互质</h3><p>数 a 和数 b 是互质的，当且仅当 $gcd(a, b) = 1$。比如，8和15是互质的，因为二者的最大公约数为1。注意到，除了质数的倍数，所有整数和某个质数 p 都是互质的。</p><p>引理：令 n 是一个正整数。如果 k 与 n 互质，那么存在一个整数 $k^{-1}$使得：<br>$$k \cdot k^{-1} \equiv 1 \pmod n$$<br>从这个引理可以看出，不需模数是质数，只要 k 和 n互质，就可以安全地进行消去操作。</p><p>推论：假设 n 是一个正整数并且 k 与 n 互质，如果<br>$$ak \equiv bk \pmod n$$<br>那么<br>$$a \equiv b \pmod n$$</p><p>引理：假设 n 是一个正整数并且 k 与 n 互质。那么序列：</p><p> $$rem(k_1\cdot k, n), rem(k_2\cdot k, n), …, rem((k_r\cdot k), n)$$</p><p> 是下面序列的一个排序：<br>$$k_1, k_2, …, k_r$$</p><p>也即这两个序列相等，只是元素的顺序不同。</p><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>欧拉函数 $\phi(n)$表示集合${1,2,…,n}$中和 n 互质的数的个数。比如$\phi(7) = 6$，因为1，2，3，4，5，6与7是互质的。</p><p>定理：对任意的数 n， 如果$p_1,p_2,…,p_j$ 是 n 的互不相同的质因子，那么：<br>$$\phi(n) = n(1-\frac 1 p_1)(1-\frac 1 p_2)\cdot \cdot \cdot (1-\frac 1 p_j)$$</p><p>推论：令 $n = pq$，p，q 为不同的质数，那么 $\phi(n) = (p - 1)(q - 1)$</p><p>欧拉定理：假设 n 是一个正整数并且 k 与 n 互质，那么：<br>$$k^{\phi(n)} \equiv 1 \pmod n$$</p><p>实际上，费马小定理是欧拉定理中的n是质数时的的一个特例，当 n 为质数时有：<br>$$\phi(n) = n - 1$$</p><h2 id="图灵的故事"><a href="#图灵的故事" class="headerlink" title="图灵的故事"></a>图灵的故事</h2><p>图灵是计算机领域的天才，也是他最早提出用数论来解决加密传输的问题。当时它未把文章发表，只留有代码，下面我们就看看众多的计算机学家如何从图灵的代码开始，一步步完善，最终形成如今成熟加密系统的过程。</p><h3 id="图灵代码（版本1-0）"><a href="#图灵代码（版本1-0）" class="headerlink" title="图灵代码（版本1.0）"></a>图灵代码（版本1.0）</h3><p>实现加密传输的第一个问题是要把文字信息转换为整数，这样我们就可以对整数应用数学操作。这个过程不是加密的过程，因此可以使用一些简单的办法，比如把每个字符或者汉子用一个数字表示，所有字符表示的数字串联在一起就形成了一个很大的整数。比如，“今晚两点行动”可以用下面的方法编码：<br>    今   晚   两   点   行   动<br>    22  09  03  20  15  25<br>图灵的代码需要信息被编码成一个质数，而实际上，通过在原有的整数后面添加几位数可以达到这个要求，这个算法已经比较成熟。信息被编码成质数后，加密和解密的过程按照下面的方式进行。假设 m 是未加密的信息，$m^*$是加密后的信息，k是密钥：</p><p><strong>开始前</strong> 信息的发送和接收方在某个阴暗的街角确定一个密钥k，k是一个很大的质数。</p><p><strong>加密</strong> 信息的发送方通过下面的方式加密信息：<br>$$m^* = m \cdot k$$</p><p><strong>解密</strong> 信息的接收方通过下面的方式还原信息：<br>$${m^* \over k} = {m \cdot k \over k} = m$$</p><p>图灵算法加密过后的数是原来的质数与一个很大的质数密钥相乘的结果，是一个很大的数，要想直接因式分解这个数得到密钥k是很难得一件事，然而，使用数论的技巧却可以很容易打破这个系统。<br>假设我们得到了两个经过加密的信息：</p><p>$$m_1^\ast= m_1 \cdot k \;and\; m_2^\ast= m_2 \cdot k$$</p><p>那么$m_1^\ast$$和$$m_2^\ast$的最大公约数就是k！从前面可以知道，k可以非常快速地求出来！</p><h3 id="图灵代码（版本2-0）"><a href="#图灵代码（版本2-0）" class="headerlink" title="图灵代码（版本2.0）"></a>图灵代码（版本2.0）</h3><p><strong>开始前</strong> 信息的发送和接收方确定一个很大的质数 p, p可以是公开的（p将作为我们的模数）。另外，他们还偷偷地确定一个私有密钥$k\in {1,2,…,p-1}$</p><p><strong>加密</strong> 信息 m 可以是集合${0,1,2,…,p-1}$中的任意一个数，并且 m 不需要是质数。信息的发送方通过下面的方式加密信息：<br>$$m^\ast = rem(mk, p)$$<br>可以看出，加密过程不是简单的求积，而是将求积的结果取了模</p><p><strong>解密</strong> 解密的过程需要用到前面提到的求模代数里同余和乘法逆元的知识。<br>根据余数的定义，我们知道加密后的信息是原信息与质数 k 相乘以 p 为模数的余数，即：<br>$$m^\ast = rem(mk, p) = mk \pmod p$$<br>现在我们想要从$m^*$求出 m，自然想到如果在上式两边同乘以k的逆元，那么就可以消去和 m 相乘的 k，从而得到 m。<br>假设 k 的乘法逆元是$k^{-1}$（之所以要假设，是因为k的乘法逆元可能不存在），那么有<br>$$m^\ast k^{-1}  \equiv mk\cdot k^{-1} \equiv m \pmod p$$</p><p>由于 $m \in {1, 2, …, p - 1}$，有<br>$$m = rem(m^\ast k^{-1}, p)$$</p><p>实际上，这个思路的公钥k也极容易泄露出去！我们需要知道一对加密前和加密后的信息就可以窃取公钥。下面是具体的做法：<br>假设加密前的信息 m 和加密后的信息 $m^*$ 被泄露，根据加密过程，有：<br>$$m^\ast = rem(mk, p)$$<br>即<br>$$m^\ast = mk \pmod p$$<br>由于 p 是一个质数，所以 m 与 p 互质，即：<br>$$gcd(m, p) = 1$$<br>由于 m 和 p 已知，可以算出 m 以 p 为模数的乘法逆元 $m^{-1}$，使得<br>$$m\cdot m^{-1} \equiv 1 \pmod p$$</p><p>当我们把已知的 $m^*$ 和 m 的乘法逆元相乘就有：<br>$$m^\ast \cdot m^{-1} \equiv km \cdot m^{-1} \equiv k \pmod p$$<br>看到了吗？我们得到了密钥 k ！只要我们继续算出 k 以 p 为模数的乘法逆元，就可以解密任何信息！</p><h2 id="RSA-算法"><a href="#RSA-算法" class="headerlink" title="RSA 算法"></a>RSA 算法</h2><p>RSA 公钥加密算法是1977年MIT发明的，是目前使用最广泛的加密算法，很难被窃取，它不需要交换私钥，只要数据接收者自己生成一对公钥和一对私钥，任何人都可以使用接收者发布的公钥加密信息，接受者然后使用只有它自己知道的私钥进行解密。</p><p><strong>开始前</strong> 信息接收方使用下面的方式创建一对公钥和一对私钥</p><ol><li>生成两个不同的质数，p 和 q。由于它们要用来生成私钥，因此必须要藏好。</li><li>让 n = pq。n 将作为公钥对的一部分，由于要分解两个大质数的乘积十分困难，因此p和q很难被破解。</li><li>选择一个整数 e 使得 $gcd(e, (p-1)(q-1)) = 1$。公钥对就是(e, n),可以被广泛分发。</li><li>计算 d，使得 $de \equiv 1 \pmod {(p-1)(q-1)}$。私钥对就是(d, n),必须要藏好。<br>可以看出，整数 e 和 d 是以 (p-1)(q-1) 为模的乘法逆元</li></ol><p><strong>加密</strong> 给定一个信息 m，发送方首先检查 $gcd(m, n) = 1$,接着用公钥对信息进行加密：<br>$$m^*=rem(m^e,n)$$</p><p><strong>解密</strong> 使用私钥把加密的信息还原回去：<br>$$m=rem({m^\ast}^d, n)$$</p><p>现在我们证明为了什么可以这么还原回去：<br>根据加密过程知：<br>$$m^\ast = rem(m^e,n) \equiv m^e \pmod n$$<br>即<br>$$m^\ast \equiv m^e \pmod n$$<br>两边同时d方：<br>$${m^\ast}^d \equiv m^{ed} \pmod n$$<br>由于 e 与 d 互质，根据最大公约数和线性组合的关系知存在 r 使得：<br>$$e\cdot d = 1 + r(p - 1)(q - 1)$$<br>代入到上式有：<br>$${m^\ast}^d \equiv m^{1 + r(p - 1)(q - 1)} \pmod n$$<br>又因为 $n = pq$，根据费马小定理，有<br>$$m^{p-1} \equiv 1 \pmod p$$<br>$$m^{q-1} \equiv 1 \pmod q$$<br>$${m^\ast}^d \equiv m^{1 + r(p - 1)(q - 1)} \pmod p$$<br>$${m^\ast}^d \equiv m^{1 + r(p - 1)(q - 1)} \pmod q$$<br>因此<br>$${m^\ast}^d \equiv m \pmod p$$<br>$${m^\ast}^d \equiv m \pmod q$$<br>即<br>$$p | {m^\ast}^d - m$$<br>$$q | {m^\ast}^d - m$$<br>$$pq | {m^\ast}^d - m$$<br>所以<br>$${m^\ast}^d \equiv m \pmod n$$<br>最后便得到了<br>$$m=rem({m^\ast}^d, n)$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们使用 git 同步代码，ssh 远程登录虚拟机、使用数字签名、加密哈希函数以及电子支付系统时，都会用到公钥加密系统，而支撑起公钥加密系统的理论便是数论。&lt;/p&gt;
&lt;p&gt;数论是关于整数的理论，首先来了解一些基本的概念和理论，然后再看看前人为实现安全加密做出的努力，最后再介绍现在广泛使用的 RSA 公钥加密算法。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.cartosquare.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数论" scheme="http://www.cartosquare.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="加密算法" scheme="http://www.cartosquare.com/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="RSA 算法" scheme="http://www.cartosquare.com/tags/RSA-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用深度学习来探索地球，你信吗？</title>
    <link href="http://www.cartosquare.com/2016/09/03/deep-learning-intro/"/>
    <id>http://www.cartosquare.com/2016/09/03/deep-learning-intro/</id>
    <published>2016-09-03T12:01:42.000Z</published>
    <updated>2016-09-04T02:59:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近深度学习在计算机视觉领域取得了巨大的突破，更是随着AlphaGo与李世石的大战被普通老百姓所津津乐道。传统的遥感影像识别势必会在深度学习的影响下向前进一步发展，用深度学习来探索地球在不远的将来也将成为现实。</p><a id="more"></a><h2 id="什么是深度学习"><a href="#什么是深度学习" class="headerlink" title="什么是深度学习"></a>什么是深度学习</h2><p>深度学习实际上依赖的是深度神经网络。最近在计算机视觉上取得重大突破的是一种称为深度卷积神经网络的结构。科学研究表明，人的大脑里面有成百上千亿个神经元，这些神经元组成的网络支持着大脑的识别、分析等活动。深度卷积神经网络正是对大脑神经元结构的一种仿生工程。</p><p><img src="/images/blogs/deep-learning-intro/cnn_brain.png" alt="cnn_brain"></p><p>拿图像识别为例。假设墙上挂有一副画，我们观察这幅画时，图像通过反射的光线进入到眼睛的成像系统，进而传给V1结构，V1结构包含大量的神经元，然后进入V4结构识别复杂的纹理，最后到达大脑皮层得出识别结果。</p><p>大脑在识别这幅画的时候，是以一种分层的方式来逐步识别的，比如我们可能最开始注意到这是一幅森林的图像，然后再注意到图像里的一些比较锐利的线段、细微的纹理变化等等。最后我们就可以一一识别图像里的物体，比如树木、动物等。</p><p>受人脑识别图像的启发，深度卷积神经网络也是由许多神经元组成，并且神经元分层排布。把图像里的所有像素作为输入，每一层的神经元都会去观测图像里的不同模式的特征，层数越深，观测的特征就越抽象，因为下一层的观测是在上一层观测的基础之上进行的。到最后一层，神经网络也被设计为输出图像里的物体类别。</p><p>在使用神经网络分类之前，要使用大量的样本数据去训练神经网络，经过训练的神经网络知道哪些特征（或者特征的组合）对于分类的作用最为显著，在输入一个新的图像时，就可以用学习到的特征对图像进行分类。</p><p><img src="/images/blogs/deep-learning-intro/cnn.png" alt="cnn"></p><p>上图表示的是深度卷积神经网络识别图像的过程。最左边的鸟类图像是输入，最右边一层输出这个图像分别属于哪些类别的概率，从图中可以看出，这个图像属于bird这个类别的概率最大，说明神经网络成功识别出了图像。二者中间的许多层就是神经网络识别出来的不同的特征，在上图中，只把每层中最显著的10个特征可视化出来，实际上每一层的特征数量要远远大于10个。可以看出，层数越深，识别出来的特征就越抽象，这符合大脑的认知模式。</p><p>深度卷积神经网络之所以能取得媲美人类大脑的分类精度，在于它和人脑一样，可以同时观测图像里不同模式的特征，并且分层处理。而传统的图像分类手段只是采取单一的特征去分类，因此精度远不如深度神经网络。为了让大家理解深度卷积神经网络同时观测的特征之多，我们可以做一个简单的计算：假设深度卷积神经网络第一个卷积层观测了12个特征，第二个卷积层在上一个卷积层的基础上观测了28个特征，那么总共就是28x12=336个特征，如果第三个卷积层在上一个卷积层的基础上观测128个特征，那么总共就是336x128=43008个特征……而现在最多的深度卷积网络已经超过了上百层，可想而知观测的特征是极其庞大的，所以说用“上帝之眼”来形容深度卷积网络识别图像的过程一点都不为过。而这也是深度卷积网络获得成功的关键所在。在这么多特征中，总能找到能够很好分类图像的显著特征。</p><h2 id="深度学习在影像识别中的应用"><a href="#深度学习在影像识别中的应用" class="headerlink" title="深度学习在影像识别中的应用"></a>深度学习在影像识别中的应用</h2><p>传统的影像解译主要是根据影像中的色调、几何形态、纹理等特征来识别物体，而深度学习可以自动地观测数量庞大的特征来进行识别。遥感影像和普通的图片相比有优点也有缺点，优点是遥感影像不局限于普通彩色图片的RGB三个波段，越多的波段能够观测的特征就越多，也就越容易进行识别；而缺点则是遥感影像的分辨率一般没有图片那么高，但是现在随着越来越多的高精度传感器被发射升空，未来这个缺点将会被逐步克服。</p><p>借助深度学习网络，我们就可以自动化地对影像进行识别、甚至是搜索。下面是我在公司做的一个 demo 视频：</p><iframe height="320" width="100%" src="http://player.youku.com/embed/XMTY2NzQ2NTYyNA==" frameborder="0" allowfullscreen></iframe><p>你也可以尝试这个<a href="http://demo.geohey.com/terrain-context/2" target="_blank" rel="external">交互demo</a>来识别你感兴趣的地区。</p><p>除了分类，深度卷积神经网络还可以对原始图像进行分割。下面的demo可以从你选择的矩形范围内分割出其中的建筑出来。</p><iframe height="320" width="100%" src="http://demo.geohey.com:8898/" frameborder="0" allowfullscreen></iframe><p>如果我们能够对遥感影像进行分类和分割，那可以应用在哪里呢？</p><p>首先是<strong>识别</strong>，这个应用场景是我们要寻找某个区域内的地物的时候，比如马航失事飞机的搜索、战时敌军机场的寻找等等。除了简单的搜索，还可以进行相似地物的搜索，正如上面分类 demo 展示的，当你选中一个地物时，我们可以搜索出和这个地物相似的其它地物。</p><p>其次是<strong>数据采集</strong>，矢量地图往往无法包含所有要素信息，并且更新间隔较长。如果能够从卫星影像中提取出矢量信息，补充到矢量数据库中，则可以极大减少人力采集数据的成本和数据更新的时间。比如，上面的建筑分割 demo ，我们可以很容易通过分割的方式统计某个城市建筑的面积。将来，如果分割精度进一步提高，完全可以自动化地提取全国的建筑矢量图层。</p><p>最后是<strong>监控</strong>，卫星在空中每天围绕着地球转，利用它拍摄的影像来监控目标是十分合适的。比如，监控工地的建设进度、城市建成区的拓展、农作物的生长情况、河流的萎缩情况以及野生动物的活动等等，而这一切都要建立在影像自动识别的前提之下。</p><p>当然，这里列出的并不完全，可以利用影像去做的事情还有更多！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近深度学习在计算机视觉领域取得了巨大的突破，更是随着AlphaGo与李世石的大战被普通老百姓所津津乐道。传统的遥感影像识别势必会在深度学习的影响下向前进一步发展，用深度学习来探索地球在不远的将来也将成为现实。&lt;/p&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://www.cartosquare.com/categories/GIS/"/>
    
    
      <category term="深度学习" scheme="http://www.cartosquare.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="影像识别" scheme="http://www.cartosquare.com/tags/%E5%BD%B1%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
      <category term="深度卷积神经网络" scheme="http://www.cartosquare.com/tags/%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机中的数学一：如何去证明</title>
    <link href="http://www.cartosquare.com/2016/08/29/propositions/"/>
    <id>http://www.cartosquare.com/2016/08/29/propositions/</id>
    <published>2016-08-29T14:11:58.000Z</published>
    <updated>2016-09-10T00:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>计算机领域中的许多问题往往需要用数学模型和方法来解决，而数学的独特的证明方式在其中起着核心的作用。</p><p>简单来说，证明是一种建立事实的方法。然而，就像“美丽”这个词一样，“事实”有时候也是因人而异的：在法官眼中，事实得由证据来决定；在商界，事实可能由一个可信赖的人或是组织或仅仅是你的 boss 指定；在物理或是生物领域，事实由实验来确定；在哲学中，事实如“我思故我在”这句名言般缥缈。</p><p>当然，数学有它自己对于证明的定义。</p><a id="more"></a><h1 id="数学意义上的证明"><a href="#数学意义上的证明" class="headerlink" title="数学意义上的证明"></a>数学意义上的证明</h1><p>数学上证明是从一组基本的<strong>公理</strong>出发，通过一系列<strong>逻辑推理</strong>最终得到待证明的<strong>命题</strong>。</p><p>这个定义由三个核心组成，分别是命题、逻辑推理和公理。本文先介绍命题。其余两个后续文章会继续介绍。</p><h1 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h1><p>生活中我们也常常会提到命题这个词，命题实际上就是一个陈述语句，只不过命题这个陈述语句要么是对的，要么是错的。如果一个陈述语句无法判断对错，那么就不是命题。比如，“你喜欢数学吗？”这句话就不是命题。</p><p>下面是两个命题：</p><p><strong>命题1：</strong>   <em>2 + 3 = 5</em><br><strong>命题2：</strong>   <em>1 + 1 = 3</em></p><h2 id="复合命题"><a href="#复合命题" class="headerlink" title="复合命题"></a>复合命题</h2><p>单个命题比较简单，如果把多个命题通过“非”， “与”， “或”， “如果-那么”等词连接起来就成了复合命题。下面的命题就是由三个命题P、Q和R组合而成的：</p><p><em>如果 P 与 Q， 那么 R</em></p><p>如果已知单个命题的真假、根据不同的连接词就可以得出复合命题的真假。下面用真值表来表达。</p><h3 id="“非”-“与”-和“或”"><a href="#“非”-“与”-和“或”" class="headerlink" title="“非”, “与”, 和“或”"></a>“非”, “与”, 和“或”</h3><table><thead><tr><th>P</th><th>非 P</th></tr></thead><tbody><tr><td>T</td><td>F</td></tr><tr><td>F</td><td>T</td></tr></tbody></table><table><thead><tr><th>P</th><th>Q</th><th>P 与 Q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table><p>从上表可以看出，命题 “P 与 Q” 仅当 P 和 Q 都是真时才为真。</p><table><thead><tr><th>P</th><th>Q</th><th>P 或 Q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table><p>命题 “P 或 Q” 只要 P 和 Q 有一个为真就为真。而如果想排除掉 P 和 Q 共同为真的情况，可以使用 异或 连接词：</p><table><thead><tr><th>P</th><th>Q</th><th>P 异或 Q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>T</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>F</td></tr></tbody></table><h3 id="“如果-那么”"><a href="#“如果-那么”" class="headerlink" title="“如果-那么”"></a>“如果-那么”</h3><p>前面三个连接词比较容易理解，而“如果-那么”则不太容易理解。先看真值表</p><table><thead><tr><th>P</th><th>Q</th><th>如果 P 那么 Q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>T</td></tr><tr><td>F</td><td>F</td><td>T</td></tr></tbody></table><p>我们用一个具体点的命题来验证上面的结论：</p><p><em>如果黎曼猜想是对的，那么对于每个实数 $x$，都有 $x^2 \geq 0$</em></p><p>黎曼猜想是一个著名的未解问题，因此命题 P 的真假未知，但是这并不妨碍我们判定上面这个命题是真的。也就是说，无论 P 是真的还是假的，上述命题都是真的。</p><p>有点不可思议？那我们再来看一个更极端的例子：</p><p><em>如果猪可以飞，那么你可以理解切比雪夫不等式</em></p><p>实际上，你可不可以理解切比雪夫不等式和猪可不可以飞没有半毛钱关系！不管猪可不可以飞，这个命题都是真的。</p><p>总之，命题“如果 P 那么 Q”是真的情况有两种，要么Q是真的，要么P是假的。</p><h3 id="当且仅当"><a href="#当且仅当" class="headerlink" title="当且仅当"></a>当且仅当</h3><p>这个比较容易理解，“P 当且仅当 Q” 即意味着P和Q是等价的。</p><p>下面是一个例子：<br>$$x^2 - 4 \geq 0 \quad 当且仅当\quad |x| \geq 2$$</p><table><thead><tr><th>P</th><th>Q</th><th>P 当且仅当 Q</th></tr></thead><tbody><tr><td>T</td><td>T</td><td>T</td></tr><tr><td>T</td><td>F</td><td>F</td></tr><tr><td>F</td><td>T</td><td>F</td></tr><tr><td>F</td><td>F</td><td>T</td></tr></tbody></table><h3 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h3><p>在数学中，往往用符号替换英语，上述的几种连接词可以用下面的符号表示：</p><table><thead><tr><th>英语</th><th>符号</th></tr></thead><tbody><tr><td>非 P</td><td>$\lnot{P}$</td></tr><tr><td>P 与 Q</td><td>$P\land{Q}$</td></tr><tr><td>P 或 Q</td><td>$P\lor{Q}$</td></tr><tr><td>如果 P 那么 Q</td><td>$P\implies{Q}$</td></tr><tr><td>P 当且仅当 Q</td><td>$P\iff{Q}$</td></tr></tbody></table><h3 id="逻辑上相等的命题"><a href="#逻辑上相等的命题" class="headerlink" title="逻辑上相等的命题"></a>逻辑上相等的命题</h3><p>实际上，与命题 “如果 P 那么 Q” 相等的命题是“如果非 P 那么非 Q”。这两个命题有着相同的真值表。</p><p>注意 “如果 P 那么 Q” 与 “如果 Q 那么 P” 并不相等。只有当 “P 当且仅当 Q” 为真时二者才相等。</p><h2 id="计算机程序中的命题逻辑"><a href="#计算机程序中的命题逻辑" class="headerlink" title="计算机程序中的命题逻辑"></a>计算机程序中的命题逻辑</h2><p>了解了上述的复合命题的判定方法，很容易知道下面这两行程序表述的命题是相等的，而有时候我们可能会写成第一行的样子，导致程序运行时间和程序代码变长。</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> || (x &lt;= <span class="number">0</span> &amp;&amp; y &gt; <span class="number">100</span>))</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> || y &gt; <span class="number">100</span>)</div></pre></td></tr></table></figure><h2 id="断言和量词"><a href="#断言和量词" class="headerlink" title="断言和量词"></a>断言和量词</h2><p>之前我们谈到的命题都是直观上很容易判断真假的命题，然而，有些命题可能会涉及无穷的数导致要判断真假得检查无穷的情况。比如下面这个命题：</p><p><em>对于每个非负整数 n，$n^2 + n + 41$是质数</em></p><p>实际上，上述的涉及无穷的数的命题在数学上十分常见，以至于有特定的符号来描述，上面的命题也可以写成下面的形式：</p><p>$$\forall n \in N. n^2 + n + 41 是质数$$</p><p>下面是另一个例子：</p><p><em>$$\forall a,b,c,d \in Z^+. a^4 + b^ 4 + c^4 \neq d^4.$$</em></p><p>这种真假依赖于检查多个变量的命题称为断言。断言常常和一些量词一起出现，比如描述这个断言是针所有情况都为真还是针对某些情况为真。比如，下面这个断言：</p><p>$$x^2 \geq 0$$</p><p>对任何实数x都为真。而下面这个断言：<br>$$5x^2 - 7 = 0$$<br>则仅当$x = \pm\sqrt{7/5}$才成立</p><p>用数学符号来描述某些情况成立的例子如下：</p><p>$$\exists x \in D \quad P(x)$$</p><p>表示在集合 D 中存在 x，满足 P(x)</p><h1 id="证明的模式"><a href="#证明的模式" class="headerlink" title="证明的模式"></a>证明的模式</h1><p>证明的方法包括：</p><ul><li>公理法</li><li>穷举法</li><li>反证法</li><li>数学归纳法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机领域中的许多问题往往需要用数学模型和方法来解决，而数学的独特的证明方式在其中起着核心的作用。&lt;/p&gt;
&lt;p&gt;简单来说，证明是一种建立事实的方法。然而，就像“美丽”这个词一样，“事实”有时候也是因人而异的：在法官眼中，事实得由证据来决定；在商界，事实可能由一个可信赖的人或是组织或仅仅是你的 boss 指定；在物理或是生物领域，事实由实验来确定；在哲学中，事实如“我思故我在”这句名言般缥缈。&lt;/p&gt;
&lt;p&gt;当然，数学有它自己对于证明的定义。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://www.cartosquare.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="证明" scheme="http://www.cartosquare.com/tags/%E8%AF%81%E6%98%8E/"/>
    
      <category term="命题" scheme="http://www.cartosquare.com/tags/%E5%91%BD%E9%A2%98/"/>
    
      <category term="数学" scheme="http://www.cartosquare.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>git commits 统计分析</title>
    <link href="http://www.cartosquare.com/2016/08/27/statistic-git-commits/"/>
    <id>http://www.cartosquare.com/2016/08/27/statistic-git-commits/</id>
    <published>2016-08-27T04:45:57.000Z</published>
    <updated>2016-08-27T06:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着一个项目的推进，项目的代码越来越多，团队成员也可能越来越多。这时候，如何跟踪项目的演进对于项目管理者来说就成了一个问题。项目管理者往往需要知道项目代码数量随着时间的推移发生的变化、每天/每周/每月/每年的提交情况以及每个贡献者的提交情况等等。而这些统计信息无法直接从 git log 中直接获取，最近发现了一个叫<a href="http://gitstats.sourceforge.net/" target="_blank" rel="external">GitStats</a>的工具可以从 git 提交历史中自动生成这些统计信息，并生成 HTML 形式的报告。下面简要介绍一下这个工具。</p><a id="more"></a><p>GitStats 生成的统计信息主要有四个方面：</p><h2 id="一般统计信息"><a href="#一般统计信息" class="headerlink" title="一般统计信息"></a>一般统计信息</h2><p>包括以下几项</p><ul><li>项目名称</li><li>统计的时间段</li><li>总共的文件数目</li><li>总共的代码行数</li><li>总共提交次数、每天平均提交次数</li><li>贡献者数量、平均每个贡献者的提交次数</li></ul><p>下图是一个例子：</p><p><img src="/images/blogs/statistic-git-commits/general_info.png" alt="一般统计信息"></p><h2 id="活动信息"><a href="#活动信息" class="headerlink" title="活动信息"></a>活动信息</h2><p>包括：</p><ul><li>过去32周每周的提交次数<br><img src="/images/blogs/statistic-git-commits/weekly_activity.png" alt="weekly_activity"></li><li>按小时统计的提交次数<br><img src="/images/blogs/statistic-git-commits/hours_of_day.png" alt="hours_of_day"></li><li>按星期统计的提交次数<br><img src="/images/blogs/statistic-git-commits/days_of_week.png" alt="days_of_week"></li><li>按小时和星期统计的提交次数<br><img src="/images/blogs/statistic-git-commits/hours_of_week.png" alt="hours_of_week"></li><li>按月份统计的提交次数<br><img src="/images/blogs/statistic-git-commits/month_of_year.png" alt="month_of_year"></li><li>按年统计的提交次数<br><img src="/images/blogs/statistic-git-commits/year.png" alt="year"></li><li>按月份和年统计的提交次数<br><img src="/images/blogs/statistic-git-commits/year_month.png" alt="weekly_activity"></li></ul><h2 id="贡献者信息"><a href="#贡献者信息" class="headerlink" title="贡献者信息"></a>贡献者信息</h2><ul><li><p>贡献者列表（包括名字、提交次数以及占总提交次数的百分比，第一次提交日期，最后一次提交日期，加入项目的天数、活跃的天数等等<br><img src="/images/blogs/statistic-git-commits/authors.png" alt="authors"></p></li><li><p>每位贡献者累积添加的代码行数曲线<br><img src="/images/blogs/statistic-git-commits/lines_per_authors.png" alt="lines_per_authors"></p></li><li><p>每位贡献者的提交次数曲线<br><img src="/images/blogs/statistic-git-commits/commits_per_author.png" alt="commits_per_author"></p></li><li><p>每位贡献者每个月的提交次数<br><img src="/images/blogs/statistic-git-commits/authors_per_months.png" alt="authors_per_months"></p></li><li><p>每位贡献者每年的提交次数<br><img src="/images/blogs/statistic-git-commits/authors_per_year.png" alt="authors_per_year"></p></li></ul><h2 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h2><p>包括</p><ul><li>总文件数</li><li>代码总行数</li><li>平均文件大小</li><li>文件数量随时间变化曲线</li><li>各种类型文件的数量及占的百分比</li></ul><h2 id="代码信息"><a href="#代码信息" class="headerlink" title="代码信息"></a>代码信息</h2><ul><li>总代码行数</li><li>代码行数随时间的变化曲线</li></ul><p>总之，自动化地使用 GitStats 生成项目的统计信息能够大大减轻了对多个代码仓库各项指标的跟踪工作，易于管理者统计一段时间来仓库的变化以及每一位贡献者的提交统计。</p><p>看了这么多，如果你对 GitStats 感兴趣并想尝试一下，可以 clone 我的<a href="https://github.com/cartosquare/git-commits-vis.git" target="_blank" rel="external">代码</a>来批量生成你的所有仓库的统计信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着一个项目的推进，项目的代码越来越多，团队成员也可能越来越多。这时候，如何跟踪项目的演进对于项目管理者来说就成了一个问题。项目管理者往往需要知道项目代码数量随着时间的推移发生的变化、每天/每周/每月/每年的提交情况以及每个贡献者的提交情况等等。而这些统计信息无法直接从 git log 中直接获取，最近发现了一个叫&lt;a href=&quot;http://gitstats.sourceforge.net/&quot;&gt;GitStats&lt;/a&gt;的工具可以从 git 提交历史中自动生成这些统计信息，并生成 HTML 形式的报告。下面简要介绍一下这个工具。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.cartosquare.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git commits" scheme="http://www.cartosquare.com/tags/git-commits/"/>
    
      <category term="statistic logs" scheme="http://www.cartosquare.com/tags/statistic-logs/"/>
    
  </entry>
  
  <entry>
    <title>Scrum 游戏规则</title>
    <link href="http://www.cartosquare.com/2016/08/26/scrum-game-rules/"/>
    <id>http://www.cartosquare.com/2016/08/26/scrum-game-rules/</id>
    <published>2016-08-26T15:46:18.000Z</published>
    <updated>2016-08-27T02:34:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>许多公司都在用 Scrum，我们公司也不例外。那么 Scrum 到底是什么？我们是否真的在实践 Scrum 的原则？要知道如果没有严格按照 Scrum 的原则实践，那么我们用的 Scrum 也就不是 Scrum 了。</p><a id="more"></a><h2 id="Scrum-的定义"><a href="#Scrum-的定义" class="headerlink" title="Scrum 的定义"></a>Scrum 的定义</h2><p>Scrum 是一个框架，用于开发和持续支持复杂产品的一个过程框架。Scrum 是：</p><ul><li>轻量级的</li><li>易于理解的</li><li><strong>难以精通的</strong>（没错！易于理解但难以精通！！！）</li></ul><p>Scrum 框架由 Scrum 团队以及与之相关的角色、事件、工件和规则组成。框架中的每个部分都有其特定的目的，对于 Scrum 的成功与使用是至关重要的。下文会详细介绍这几个组成部分，在此之前，我们先来看看 Scrum 的理论依据，<strong>看看 Scrum 的内部到底流的是什么血液</strong>。</p><h2 id="Scrum-理论"><a href="#Scrum-理论" class="headerlink" title="Scrum 理论"></a>Scrum 理论</h2><p>Scrum 实际上是基于经验过程控制理论，也就是<strong>经验主义</strong>。经验主义主张知识源自实际经验以及从当前已知情况下做出决定所获得。而 Scrum 采用的迭代、增量式的方法正是不断利用实际经验来优化对未来的预测和管理风险。</p><p>在经验过程控制中，<strong>透明</strong>、<strong>检视</strong>和<strong>适应</strong>是其中的三大支柱，支撑起每一个经验过程控制的实施。而 Scrum 中也同样流淌着这三种血液。</p><h3 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h3><p>过程中的关键环节必须是透明的。要拥有透明，就要为这些关键环节制定统一的标准，这样所有关心这些环节的人都会有统一的理解。例如在 Scrum 中：</p><ul><li>所有参与者谈及过程时都必须使用统一的术语</li><li>负责完成工作和验收工作的人必须对“完成”的定义，有一致的理解</li></ul><h3 id="检视"><a href="#检视" class="headerlink" title="检视"></a>检视</h3><p>Scrum 的使用者必须经常检视 Scrum 工件和完成 Sprint 目标的进展，以便发现不必要的差异。检视不应该过于频繁而阻碍工作本身。</p><h3 id="适应"><a href="#适应" class="headerlink" title="适应"></a>适应</h3><p>如果检视者发现过程中的一个或多个方面偏离于可接受范围之外，并且将会导致产品不可接受时，就必须对过程或过程化的内容加以调整。调整工作必须尽快执行才能避免进一步的偏离。</p><p>在检视与适应上，Scrum 规定了4个正式事件：</p><ul><li>Sprint 计划会议</li><li>每日 Scrum 站会</li><li>Sprint 评审会议</li><li>Sprint 回顾会议</li></ul><p>以上便是 Scrum 的内在理论，可以看出实际上 <em>Scrum 的核心是要完成透明、检视与适应这三个支柱</em>。Scrum 通过 团队以及与之相关的角色、事件、工件和规则来保证上述这三大支柱成为现实，实际上，在执行 Scrum 游戏规则时，<strong>Scrum 团队成员正慢慢有着共同的价值观</strong>。</p><h2 id="Scrum-价值观"><a href="#Scrum-价值观" class="headerlink" title="Scrum 价值观"></a>Scrum 价值观</h2><p><strong>承诺</strong>、<strong>勇气</strong>、<strong>专注</strong>、<strong>开放</strong>和<strong>敬重</strong>是决定 Scrum 是否成功的五项价值观。Scrum 团队致力于去实现共同的目标，团队成员有勇气去做正确的事并且处理那些棘手的问题；每个人专注于 Sprint 和 Scrum 团队目标的工作；Scrum 团队及其利益攸关者同意将所有工作和执行工作<br>的挑战进行公开；Scrum 团队成员相互敬重，<strong>彼此成为更有能力和独立的人</strong>。</p><p>了解了 Scrum 的定义、理论依据和价值观，我们现在首先看看 Scrum 中最重要的 <strong>Scrum 团队</strong>的组成。</p><h2 id="Scrum-团队"><a href="#Scrum-团队" class="headerlink" title="Scrum 团队"></a>Scrum 团队</h2><p>Scrum 团队由一名产品负责人、开发团队和一名 Scrum Master 组成。Scrum 团队有以下特点：</p><ul><li>跨职能的自组织团队</li><li>自组织团队自己选择如何以最好的方式来完成工作，而不是由团队之外的人来指导</li><li>跨职能团队拥有完成工作所需的全部技能，不需要依赖团队之外的人</li></ul><p>Scrum 团队之所以这么设计，是为了追求最佳的灵活力、创造力和生产力</p><h3 id="产品负责人"><a href="#产品负责人" class="headerlink" title="产品负责人"></a>产品负责人</h3><p>产品负责人负责最大化产品和开发团队工作的价值，是负责管理产品待办列表的唯一责任人。产品待办列表的管理包括：</p><ul><li>清晰地表述产品待办列表项</li><li>对产品待办列表项进行排序，使其最好地实现目标和使命</li><li>优化开发团队所执行工作的价值</li><li>确保产品待办列表对所有人是可见、透明和清晰的，同时显示 Scrum 团队下一步要做的工作</li><li>确保开发团队对产品待办列表项有足够深的了解</li></ul><p>产品负责人可以亲自完成上述工作，或者也可以让开发团队完成。然而无论何者，产品负责人是最终负责任的人。另外请注意，<strong>为了保证产品负责人的工作取得成功，组织中的所有人员都必须尊重他/她的决定；另外一旦待办列表确定，任何人都不得要求开发团队按照另一套需求展开工作或是做其他任何人指定的工作</strong></p><h3 id="开发团队"><a href="#开发团队" class="headerlink" title="开发团队"></a>开发团队</h3><p>开发团队负责创建和交付产品增量。开发团队有以下特点：</p><ul><li>他们是<strong>自组织</strong>的。没有任何人有权告诉开发团队应该如何把产品待办列表变成潜在可发布的功能增量</li><li>开发团队是跨职能的，团队作为一个整体，拥有创建产品增量所需的全部技能</li><li>在开发团队内部没有头衔，不管承担哪种工作都只有开发人员这一头衔，无一例外。</li><li>开发团队内不存在子团队</li><li>开发团队中的每个成员也许有特长和专注的领域，但是责任属于整个开发团队</li><li>开发团队的规模一般在3至9人，太小没有足够互动，生产力增长不大；太大则需要过多的沟通成本</li></ul><h3 id="Scrum-Master"><a href="#Scrum-Master" class="headerlink" title="Scrum Master"></a>Scrum Master</h3><p>Scrum Master 负责保证所有人都能正确地理解并实施 Scrum，让 Scrum 团队遵循 Scrum 的理论、实践和规则。</p><p>Scrum Master 实际上是一位服务型领导者。通过服务产品负责人、开发人员来最大化 Scrum 团队创造的价值。</p><h4 id="Scrum-Master-如何服务产品负责人"><a href="#Scrum-Master-如何服务产品负责人" class="headerlink" title="Scrum Master 如何服务产品负责人"></a>Scrum Master 如何服务产品负责人</h4><ul><li>找到有效管理产品待办列表的办法</li><li>帮助 Scrum 团队理解为何需要清晰且简明的产品待办列表项</li><li>理解在经验主义环境中的产品规划</li><li>确保产品负责人懂得如何来安排产品待办列表使其达到最大化价值</li><li>理解并实践敏捷性</li><li>按要求或需要引导 Scrum 事件</li></ul><h4 id="Scrum-Master-如何服务开发团队"><a href="#Scrum-Master-如何服务开发团队" class="headerlink" title="Scrum Master 如何服务开发团队"></a>Scrum Master 如何服务开发团队</h4><ul><li>在自组织和跨职能方面给予开发团队指导</li><li>帮助开发团队创造高价值的产品</li><li>移除开发团队工作进展中的障碍</li><li>按要求或需要引导 Scrum 事件</li><li>在 Scrum 还未完全采纳和理解的组织环境中指导开发团队</li></ul><h4 id="Scrum-Master-如何服务组织"><a href="#Scrum-Master-如何服务组织" class="headerlink" title="Scrum Master 如何服务组织"></a>Scrum Master 如何服务组织</h4><ul><li>带领并指导组织采纳 Scrum</li><li>在组织范围内规划 Scrum 的实施</li><li>帮助员工和利益攸关者理解并实施 Scrum 和经验产品开发</li><li>引发能够提升 Scrum 团队生产效率的改变</li><li>与其他 Scrum Master 一起工作，增加组织中 Scrum 应用的有效性</li></ul><p>至此，Scrum 团队已经介绍完毕，下面来看看 Scrum 中的事件有哪些。</p><h2 id="Scrum-事件"><a href="#Scrum-事件" class="headerlink" title="Scrum 事件"></a>Scrum 事件</h2><p>Scrum 用固定的事件来产生规律性，由此来减少 Scrum 之外的其它会议的必要。Scrum 事件都有时间盒的限定，即每一个事件限制在最长的时间范围内。Scrum 中的每个事件都是用来进行检视和适应的正式机会。下面分别介绍 Scrum 中的几个事件。</p><h3 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h3><p>Sprint 是 Scrum 的核心，其长度（持续时间）为一个月或更短时间。在这段时间内构建一个“完成的”、可用的和潜在可发布的产品增量。在整个开发过程期间，Sprint 的长度通常保持一致。前一个 Sprint 结束后，新的下一个 Sprint 紧接着立即开始。</p><p>Sprint 由 <em>Sprint 计划会议</em>、<em>每日 Scrum 站会</em>、<em>开发工作</em>、 <em>Sprint 评审会议</em>和<em> Sprint 回顾会议</em>构成。</p><h4 id="Sprint-计划会议"><a href="#Sprint-计划会议" class="headerlink" title="Sprint 计划会议"></a>Sprint 计划会议</h4><p>Sprint 中要做的工作在 Sprint 计划会议中来做计划。这份工作计划是由整个 Scrum 团队共<br>同协作完成的。<br>Sprint 计划会议回答以下问题：</p><ul><li>接下来的 Sprint 交付的增量中要包含什么内容？</li><li>要如何完成交付增量所需的工作？</li></ul><p>下面详细介绍这两个话题</p><h5 id="话题一：-这次-Sprint-能做什么"><a href="#话题一：-这次-Sprint-能做什么" class="headerlink" title="话题一： 这次 Sprint 能做什么"></a><strong>话题一： 这次 Sprint 能做什么</strong></h5><p>开发团队预测在这次 Sprint 中要开发的功能。产品负责人讲解 Sprint 的目标以及达成该目<br>标所需完成的产品待办列表项。整个 Scrum 团队协同工作来理解 Sprint 的工作。</p><p>Sprint 会议的输入是产品待办列表、最新的产品增量、开发团队在这个 Sprint 中能力的预<br>测以及开发团队的以往表现。开发团队自己决定选择产品待办列表项的数量。只有开发团<br>队可以评估接下来的 Sprint 可以完成什么工作。</p><p>在开发团队预测完这个 Sprint 中可交付的产品待办列表项之后，Scrum 团队草拟一个<br>Sprint 目标。Sprint 目标是在这个 Sprint 通过实现产品待办列表要达到的目的，同时它也为<br>开发团队提供指引，使得开发团队明确开发增量的目的。</p><h5 id="话题二：-如何完成所选的工作？"><a href="#话题二：-如何完成所选的工作？" class="headerlink" title="话题二： 如何完成所选的工作？"></a><strong>话题二： 如何完成所选的工作？</strong></h5><p>在设定了 Sprint 目标并选出这个 Sprint 要完成的产品待办列表项之后，开发团队将决定如<br>何在 Sprint 中把这些功能构建成“完成”的产品增量。<strong>这个 Sprint 中所选出的产品待办列表<br>项加上交付它们的计划称之为 Sprint 待办列表</strong>。</p><p>开发团队通常从设计整个系统开始，到如何将产品待办列表转换成可工作的产品增量所需<br>要的工作。</p><p>在Sprint 计划会议的最后，开发团队规划出在 Sprint 最初几天内所要做的工作，通常以一天<br>或更少为一个单位。开发团队自组织地领取 Sprint 待办产品列表中的工作，领取工作在<br>Sprint 计划会议和 Sprint 期间按需进行。</p><p>产品负责人能够帮助解释清楚所选定的产品待办列表项，并作出权衡。如果开发团队认为<br>工作过多或过少，他们可以与产品负责人重新协商所选的产品待办列表项。开发团队也可<br>以邀请其他人员参加会议，以获得技术或领域知识方面的建议。</p><p>在 Sprint 计划会议结束时，开发团队应该能够向产品负责人和 Scrum Master 解释他们将如<br>何以自组织团队的形式完成 Sprint 目标并开发出预期的产品增量。</p><h5 id="Sprint-目标"><a href="#Sprint-目标" class="headerlink" title="Sprint 目标"></a>Sprint 目标</h5><p>Sprint 目标是在当前 Sprint 通过实现产品待办列表要达到的目的。它为开发团队提供指引，使得团队明确<strong>为什么要构建增量</strong>。Sprint 目标在 Sprint 计划会议中确定。Sprint 目标为开发团队在 Sprint 中所实现的功能留有一定的弹性。所选定的产品待办列表项会提供一个连贯一致的功能，也即是 Sprint 目标。Sprint 目标可以是任何其他的连贯性来促使开发团队一起工作而不是分开独自做。</p><p>开发团队必须在工作中时刻谨记 Sprint 目标。为了达成 Sprint 目标，需要实现相应的功能和实施所需的技术。如果所需工作和预期的不同，开发团队需要与产品负责人沟通协商 Sprint 待办列表的范围。</p><h4 id="每日-Scrum-站会"><a href="#每日-Scrum-站会" class="headerlink" title="每日 Scrum 站会"></a>每日 Scrum 站会</h4><p>每日 Scrum 站会是一个以 15 分钟为限的事件，它让开发团队同步开发活动，并为接下了的 24 小时制定计划。这需要检视上次每日站会以来的工作和预测下次每日站会之前所能够完成的工作。</p><p>每日 Scrum 站会在同一时间同一地点举行，以便降低复杂性。在会议上，每一个开发团队成员都需要说明:</p><ul><li>昨天，我为帮助开发团队达成 Sprint 目标做了什么？</li><li>今天，我为帮助开发团队达成 Sprint 目标准备做什么？</li><li>是否有任何障碍在阻碍我或开发团队达成 Sprint 目标？</li></ul><p>开发团队借由每日 Scrum 站会来检视完成 Sprint 目标的进度，并检视完成 Sprint 待办列表的工作进度趋势。每日 Scrum 站会优化了开发团队达成 Sprint 目标的可能性。每天，开发团队应该知道如何以自组织团队来协同工作以达成 Sprint 目标，并在 Sprint 结束时开发出预期中的增量。开发团队或者开发团队成员通常会在每日 Scrum 站会后立即聚到一起进行更详细的讨论，或者为 Sprint 中剩余的工作进行调整或重新计划。</p><p>Scrum Master 确保开发团队每日站会如期举行，但开发团队自己负责召开会议。Scrum Master 教导开发团队将每日 Scrum 会议时间控制在 15 分钟内。</p><p>Scrum Master 强制执行每日 Scrum 站会规则：只有开发团队成员才能参加。</p><p>每日 Scrum 站会增进交流沟通、减少其他会议、发现开发过程中需要移除的障碍、突显并促进快速地做决策、提高开发团队的认知程度。<strong>这是一个进行检视与适应的关键会议</strong>。</p><h4 id="Sprint-评审会议"><a href="#Sprint-评审会议" class="headerlink" title="Sprint 评审会议"></a>Sprint 评审会议</h4><p>Sprint 评审会议在 Sprint 快结束时举行 ，用以检视所交付的产品增量并按需调整产品待办列表。</p><p>在 Sprint 评审会议中，Scrum 团队和利益攸关者协同讨论在这次 Sprint 中所完成的工作。根据完成情况和 Sprint 期间产品待办列表的变化，所有参会人员协同讨论接下来可能要做的事情来优化价值。<strong>这是一个非正式会议，并不是一个进度汇报会议，演示增量的目的是为了获取反馈并促进合作</strong>。</p><p>Sprint 评审会议包含以下内容：</p><ul><li>产品负责人邀请 Scrum 团队和主要的利益攸关者参加会议</li><li>产品负责人说明哪些产品待办列表项已经“完成”和哪些没有“完成”</li><li>开发团队讨论在 Sprint 期间哪些工作做的很好，遭遇到什么问题以及问题是如何解决的</li><li>开发团队演示“完成”的工作并解答关于所交付增量的问题</li><li>产品负责人讨论当前的产品待办列表的情况。他／她根据到目前为止的进度来预测可能的完成日期（如果有需要的话）</li><li>参会的所有人就下一步的工作进行探讨，这样， Sprint 评审会议就能够为接下了的 Sprint 计划会议提供有价值的输入信息</li><li>评审市场或潜在的产品使用方式所带来的接下来要做的最有价值的东西的改变</li><li>为下个预期产品版本的发布评审时间表、预算、潜力和市场。</li></ul><p>Sprint 评审会议的结果是一份修订后的产品待办列表，阐明很可能进入下个 Sprint 的产品待办列表项。产品待办列表也有可能为了迎接新的机会而进行全局性地调整。</p><h4 id="Sprint-回顾会议"><a href="#Sprint-回顾会议" class="headerlink" title="Sprint 回顾会议"></a>Sprint 回顾会议</h4><p>Sprint 回顾会议是 Scrum 团队检视自身并创建下一个 Sprint 改进计划的机会。</p><p>Sprint 回顾会议发生在 Sprint 评审会议结束之后，下个 Sprint 计划会议之前。Scrum Master 要确保会议举行，并且每个参会者都明白会议的目的。Scrum Master 教导大家遵守时间盒的规则。Scrum Master 作为 Scrum 过程的责任者，作为团队的一员参加该会议。</p><p>Sprint 回顾会议的目的在于：</p><ul><li>检视前一个 Sprint 中关于人、关系、过程和工具的情况如何</li><li>找出并加以排序做得好的和潜在需要改进的主要方面</li><li>制定改进 Scrum 团队工作方式的计划</li></ul><p>Scrum Master 鼓励 Scrum 团队在 Scrum 的过程框架内改进开发过程和实践，使得他们能在下个 Sprint 中更高效更愉快。<strong>在每个 Sprint 回顾会议中，Scrum 团队通过适当地调整“完成”的定义的方式来计划提高产品质量</strong>。</p><p>在 Sprint 回顾会议结束时，Scrum 团队应该明确接下来的 Sprint 中需要实施的改进。在下一个 Sprint 中实施这些改进是基于 Scrum 团队对自身的检视而做出的适当调整。虽然改进可以在任何时间执行，Sprint 回顾会议提供了一个专注于检视和适应的正式机会。</p><h2 id="Scrum-工件"><a href="#Scrum-工件" class="headerlink" title="Scrum 工件"></a>Scrum 工件</h2><p>Scrum 的工件以不同的方式表现工作任务和价值，可以用来提供透明以及检视和适应的机会。Scrum 所定义的工件是特别地设计的，是为了给关键信息提供最大透明化，因此每个人对工件都需要有相同的理解。下面是 Scrum 中用到的工件。</p><h3 id="产品待办列表"><a href="#产品待办列表" class="headerlink" title="产品待办列表"></a>产品待办列表</h3><p>产品待办列表是一份有序列表，其中包含产品需要的一切可能的东西，也是产品需求变动的唯一来源。产品负责人负责管理产品待办列表的内容、可用性和排序。</p><p>产品待办列表永远是不完整的。最早开发的产品待办列表只列举最初所知的以及理解最透彻的需求。产品待办列表会随着产品及其应用环境的改变而演进。产品待办列表是动态的，需要持续更新以反映出产品需要什么来保持其适用性、竞争力和有用。只要产品存在，产品待办列表也就同样存在。</p><p>产品待办列表列出所有的特性、功能、需求、增强和修复等对未来要发布的产品进行的改变。产品待办列表项具有这些属性：描述、次序、估算和价值。</p><p>随着产品的使用、价值的获取和获得市场的反馈，产品待办列表会成长为更大和更详尽的列表。因为需求永不停止改变，所以产品待办列表就如一份活的工件。业务需求、市场形势或者技术的变化都会引起产品待办列表的改变。</p><p>多个 Scrum 团队常常会一起参与对同一产品的开发。一个产品只有一个产品待办列表用于描述下一步产品开发工作。那么这就可能需要使用能够对产品待办列表项进行分组的属性。</p><p>产品待办列表精化指的是为产品待办列表项增添细节、估算和排序的动作。这是一个持续的过程，产品负责人和开发团队协同工作在产品待办列表项的细节上。在产品待办列表精化过程中，产品待办列表项被重新评审和修改。Scrum 团队决定如何来完成精化以及何时来完成。精化的工作通常占用开发团队不超过 10% 的产能。然而，产品负责人或者其他人在产品负责人的斟酌下，产品待办列表项可以在任何时间来更新。</p><p>排序越高的产品待办列表项通常比排序低的更清晰同时包含更多细节。根据更清晰的内容和更详尽的细节信息就能做出更为准确的估算；同样，排序越低，则细节信息越少。产品待办列表项中那些即将会占用开发团队下一个 Sprint 大部分时间的项会被加以精化，因此，任一产品待办列表项都能够在 Sprint 的时间盒期限内适当地“完成”。这些能够被开发团队在一个 Sprint 中“完成”的产品待办列表项称为“准备就绪”，它们将作为 Sprint 计划会议中的待选产品列表项。产品待办列表项的足够透明程度通常要经过上述的精化活动来获得。</p><p>开发团队负责所有估算工作。产品负责人可以通过帮助开发团队更好地理解需求，并根据情况权衡取舍来影响他们，但是最终估算是由开发团队决定的。</p><h3 id="监控目标实现的进度"><a href="#监控目标实现的进度" class="headerlink" title="监控目标实现的进度"></a>监控目标实现的进度</h3><p>在任何时刻，达成目标的剩余工作是可以累计的。产品负责人至少在每个 Sprint 评审会议中都必须跟踪剩余工作总量。产品负责人比较这次的剩余工作量与之前 Sprint 评审会议时的剩余工作量，来评估在期望的时间点达成目标的进度。这个信息对所有的利益攸关者都是透明的。</p><p>各种不同趋势走向的实践已经被使用在预测进度方面，例如，燃尽图（burn-downs）、燃烧图（burn-ups）或者累积流图（cumulative flows）。这些工具都被证实是有用的。然而，它们并不能用来取代经验主义的重要性。在复杂的环境中，未来将要发生的事是无法预知的。只有已经发生的事才能用来做前瞻性的决策。</p><h3 id="Sprint-待办列表"><a href="#Sprint-待办列表" class="headerlink" title="Sprint 待办列表"></a>Sprint 待办列表</h3><p>Sprint 待办列表是一组为当前 Sprint 选出的产品待办列表项，同时加上交付产品增量和实现 Sprint 目标的计划。Sprint 待办列表是开发团队对于下一个产品增量所需的那些功能以及交付那些功能到“完成”的增量中所需工作的预测。</p><p>Sprint 产品待办列表将开发团队用来达成 Sprint 目标的所有工作变得清晰可见。</p><p>Sprint 产品待办列表是拥有足够细节的计划，任何进度的变化可以在每日 Scrum 站会中清晰地看到。开发团队在 Sprint 期间修改 Sprint 待办列表，使得 Sprint 待办列表在 Sprint 期间涌现。涌现发生在开发团队按计划开展工作并学习到更多的关于哪些工作是达成 Sprint 目标所必需的工作时。</p><p>当新工作出现时，开发团队需要将其加入到 Sprint 待办列表中去。随着工作的执行或完成，剩余的工作量被估算并更新。当计划中的某个部分失去开发意义，就可以将其移除。在 Sprint 期间，只有开发团队可以改变 Sprint 待办列表。Sprint 待办列表是高度可见的，是对开发团队计划在当前 Sprint 内工作完成情况的实时反映，该列表由开发团队全权负责。</p><h3 id="监控-Sprint-进度"><a href="#监控-Sprint-进度" class="headerlink" title="监控 Sprint 进度"></a>监控 Sprint 进度</h3><p>在 Sprint 的任何时间点都可以计算 Sprint 待办列表中所有剩余工作的总和。开发团队至少在每日 Scrum 站会时跟踪剩余的工作量，预测达成 Sprint 目标的可能性。通过在 Sprint 中不断跟踪剩余的工作量，开发团队可以管理自己的进度。</p><h3 id="增量"><a href="#增量" class="headerlink" title="增量"></a>增量</h3><p>增量是一个 Sprint 完成的所有产品待办列表项的总和，以及之前所有 Sprint 所产生的增量的价值总和。在 Sprint 的最后，新的增量必须是“完成”的，这意味着它必须可用并且达到了 Scrum 团队“完成”的定义的标准。无论产品负责人是否决定真正发布它，增量必须可用。</p><h3 id="工件透明"><a href="#工件透明" class="headerlink" title="工件透明"></a>工件透明</h3><p>Scrum 依赖于透明。优化价值和控制风险的决定都是基于所获知的工件状态。当工件的状态是完全透明时，这些做出的决定才有一个坚实的基础；当工件的状态是不完全透明时，这些做出的决定就会有瑕疵，而价值也可能因此遭受损失，同时风险也可能会因此而增加。</p><p>Scrum Master 必须和产品负责人、开发团队和其他相关人员一起合作，以确保所有工件都是完全透明的。有些实践就是为应对不完全透明的状态而生的，Scrum Master 必须帮助每个人，让他们能够在遇到不透明的情况下采取最合适的实践。Scrum Master 能够通过检视工件、嗅探模式、倾听周围的声音以及观察预期和实际结果的差异来发现不完全透明。</p><p>Scrum Master 的职责就是和 Scrum 团队以及组织一起合作增加工件的透明化。这一工作通常包括学习、说服和改变。 透明化不会在一夜之间发生，但是这是一条必经之路。</p><h3 id="“完成”的定义"><a href="#“完成”的定义" class="headerlink" title="“完成”的定义"></a>“完成”的定义</h3><p>当产品待办列表项或增量被描述为“完成”时，每个人都必须理解“完成”意味着什么。虽然在不同 Scrum 团队之间会存在巨大的差别，但是每个团队成员必须对完成工作意味着什么有相同的理解以便确保透明化。这就是 Scrum 团队的“完成”定义，用来评估产品增量是否完成。</p><p>这一定义也同时被用来指导开发团队了解在 Sprint 计划会议时能够选择多少产品待办列表项。每个 Sprint 的目标在于交付符合 Scrum 团队当前“完成”的定义的潜在可交付功能增量。</p><p>开发团队在每个 Sprint 都交付产品功能增量。这一增量是可用的，所以产品负责人可以选择立即发布它。如果“完成”的定义对增量来说是开发组织的惯例、标准或指南，那么所有 Scrum 团队都必须遵守它，以此为最低标准。如果增量“完成”的定义不是开发组织的惯例，那么 Scrum 团队中的开发团队就必须制定适合于产品的“完成”的定义。如果系统或产品发布由多个 Scrum 团队一起开发，那么所有 Scrum 团队中的开发团队必须一起参与制定“完成”的定义。</p><p>每个增量都添加至之前的所有增量上，并且经过彻底地测试，以此确保整合在一起的所有增量都能工作。</p><p>随着团队的成熟，“完成”的定义会扩大，包含更为严格的标准来保证更高的质量。任何产品或系统都应该对其上面开发的工作有“完成”的定义。</p><h2 id="Scrum-各部分缺一不可"><a href="#Scrum-各部分缺一不可" class="headerlink" title="Scrum 各部分缺一不可"></a>Scrum 各部分缺一不可</h2><p>Scrum 的角色、工件、事件和规则是不可改变的。虽然只实施部分的 Scrum 是可能的，但这样就不是 Scrum 了。Scrum 只以整体的形式而存在，唯其如此才能作为其他技术、方法和实践的容器运作良好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许多公司都在用 Scrum，我们公司也不例外。那么 Scrum 到底是什么？我们是否真的在实践 Scrum 的原则？要知道如果没有严格按照 Scrum 的原则实践，那么我们用的 Scrum 也就不是 Scrum 了。&lt;/p&gt;
    
    </summary>
    
      <category term="方法论" scheme="http://www.cartosquare.com/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="scrum" scheme="http://www.cartosquare.com/tags/scrum/"/>
    
  </entry>
  
  <entry>
    <title>实时更新OSM数据库</title>
    <link href="http://www.cartosquare.com/2016/05/07/minutely-osm-database/"/>
    <id>http://www.cartosquare.com/2016/05/07/minutely-osm-database/</id>
    <published>2016-05-06T16:00:00.000Z</published>
    <updated>2016-08-27T02:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>巧妇难为无米之炊。对于制图者，地图数据便是一切的基础。<a href="http://www.openstreetmap.org/" target="_blank" rel="external">OpenStreetMap</a>（简称 OSM ）是一个全球路网数据（不仅仅是路网数据，还包括行政区划、自然要素等数据）的众包平台，所有人都可以免费得到这份全球的数据。由于众包的性质，OSM 的数据每分钟都在发生变化，因此，维护一个实时（分钟级的频率）更新的 OSM 数据源能够使我们的地图有更好的时效性。</p><a id="more"></a><h2 id="依赖的工具"><a href="#依赖的工具" class="headerlink" title="依赖的工具"></a>依赖的工具</h2><ul><li><p><a href="https://github.com/openstreetmap/osm2pgsql" target="_blank" rel="external">osm2pgsql</a> osm2pgsql  可以将 OSM 的数据导入 PostgreSQL 中，转化成易于渲染的结构，并且支持增量更新。</p></li><li><p><a href="https://github.com/openstreetmap/osmosis" target="_blank" rel="external">osmosis</a> osmosis 是一个 java 的命令行工具，主要用来进行 OSM 数据的各种格式之间的转换，这里用来从 OSM 远程服务器中获取更改集，从而 osm2pgsql 可以将此更改集增量应用到数据库中。</p></li><li><p>PostgreSQL, 带 postgis 拓展</p></li></ul><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><p>下载<a href="http://planet.openstreetmap.org/" target="_blank" rel="external">全球</a>或者<a href="http://download.geofabrik.de/index.html" target="_blank" rel="external">某个区域</a>的 osm 数据，最好选择 pbf 格式，相比于 xml 格式，pbf 格式会小很多。下载的时候记下数据的生产时间，下面选择同步起始时间的时候会用到，这个时间在下载的页面里会有说明。</p><p>使用下述 sql 创建一个数据库，并且建立拓展。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">createdb osm</div><div class="line">psql -d osm -c &apos;CREATE EXTENSION postgis; CREATE EXTENSION hstore;&apos;</div></pre></td></tr></table></figure><p>这里 osm 是我的数据库名，如果不习惯用命令行，可以用 pgAdmin 来进行上述操作。总之，现在我们有了一个全新的带有空间拓展的数据库了。</p><p>使用下面的命令导入之前下载好的数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">osm2pgsql -c -d osm --slim -C &lt;75% Mem&gt; --flat-nodes &lt;flat nodes&gt; -U gis -W -H localhost -P 5432 you.osm.pbf</div></pre></td></tr></table></figure><p>这里有几个地方要注意，一个是<em>-C</em>选项最好指定你电脑的内存的75%，单位为 Mb，并且最大只能为30000，<em>–flat-nodes</em> 用来指定一个文件路径，存放这个文件的位置至少要有20G的空闲空间（如果导入全球数据的话）。<br>执行这个命令可能会耗费一段时间，特别是导入全球数据，可能需要几天，如果导入全国的数据，我用8G内存的 Macbook Pro 只需要不到一个小时。注意虽然我们下载的数据量可能不是很大，但是导入到数据库后会占据很可观的数据磁盘空间，我的笔记本里全国的数据占据了接近10G的空间，因此导入比较大的范围的数据需要保证有足够的磁盘空间可用。</p><h2 id="设定更新频率"><a href="#设定更新频率" class="headerlink" title="设定更新频率"></a>设定更新频率</h2><p>首先指定更新的工作目录。下面的这行可以放到主目录下的 .bash_profile 里，如果是 windows 用户可以新建一个系统的环境变量。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export WORKDIR_OSM=$HOME/.osmosis</div></pre></td></tr></table></figure><p>初始化工作目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mkdir $WORKDIR_OSM</div><div class="line">osmosis --read-replication-interval-init workingDirectory=$WORKDIR_OSM</div></pre></td></tr></table></figure><p>上面的命令告诉 <em>osmosis</em> 从哪个目录寻找更新的信息，以及下载数据到哪里。<em>osmosis</em> 会在这个目录里创建 <em>configuration.txt</em> 和 <em>download.lock</em> 这两个文件。<em>download.lock</em> 文件用来确保同一时刻只会进行一个更新任务。<em>configuration.txt</em> 文件则用来指定更新的频率。默认情况下，<em>osmosis</em> 会提取每分钟的更改集，如果想改为提取每小时或者是天的，可以把 <em>configuration.txt</em> 里的 <em>baseurl</em> 中的 <em>replication/minute/</em> 部分改为 <em>replication/hour/</em> 或者 <em>replication/day/</em>。默认情况下每次执行更新任务最多只会提取1分钟的更改集，可以把 <em>maxInterval=3600</em> 设为0，这样子就可以一次提取所有的更改集。</p><p>为了让<em>osmosis</em>知道从哪个时刻开始进行更新，我们还要告诉它我们刚刚导入的数据的时间，访问<a href="https://osm.mazdermind.de/replicate-sequences/" target="_blank" rel="external">Peter Körner’s website tool</a>，输入我们的数据的时间，可以得到一个UTC格式的时间文件，把它保存到工作目录中，并命名为 <em>state.txt</em>。</p><p>执行更新任务</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">osmosis -q --rri --bc --simc --bc --write-xml-change &quot;-&quot; | osm2pgsql -s -a -b &quot;73,3,136,54&quot; -U gis -d osm -P 5432 -H localhost -e 15 -o expire.list -</div></pre></td></tr></table></figure><p>上述的命令中，如果导入的是全球的数据就不需要有 <em>-b</em> 参数。<em>expire.list</em> 中包含的是第15级的 dirty tile（即数据有更新的瓦片），这些瓦片需要重新生成。</p><p>linux 上可以使用 crontab 命令定期执行上述命令，这样就可以得到一个以分钟级的频率与 OSM 数据保持同步的本地数据库了。</p><p>如果使用 <em>-b</em> 选项指定了更新的范围，可能会使数据库变大，此时可以使用下面的 sql 删除掉无关的 way 和 relation。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">DELETE FROM planet_osm_ways AS w WHERE 0 = (SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(w.nodes));</div><div class="line"></div><div class="line">DELETE FROM planet_osm_rels AS r WHERE</div><div class="line">  0=(SELECT count(1) FROM planet_osm_nodes AS n WHERE n.id = ANY(r.parts))</div><div class="line">AND</div><div class="line">  0=(SELECT count(1) FROM planet_osm_ways AS w WHERE w.id = ANY(r.parts));</div><div class="line">REINDEX TABLE planet_osm_ways;</div><div class="line">REINDEX TABLE planet_osm_rels;</div><div class="line">VACUUM FULL;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;巧妇难为无米之炊。对于制图者，地图数据便是一切的基础。&lt;a href=&quot;http://www.openstreetmap.org/&quot;&gt;OpenStreetMap&lt;/a&gt;（简称 OSM ）是一个全球路网数据（不仅仅是路网数据，还包括行政区划、自然要素等数据）的众包平台，所有人都可以免费得到这份全球的数据。由于众包的性质，OSM 的数据每分钟都在发生变化，因此，维护一个实时（分钟级的频率）更新的 OSM 数据源能够使我们的地图有更好的时效性。&lt;/p&gt;
    
    </summary>
    
      <category term="GIS" scheme="http://www.cartosquare.com/categories/GIS/"/>
    
    
      <category term="OSM" scheme="http://www.cartosquare.com/tags/OSM/"/>
    
  </entry>
  
  <entry>
    <title>常用的排序算法</title>
    <link href="http://www.cartosquare.com/2016/04/22/sorting-algorithms/"/>
    <id>http://www.cartosquare.com/2016/04/22/sorting-algorithms/</id>
    <published>2016-04-21T16:00:00.000Z</published>
    <updated>2016-08-29T13:13:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>还记得上数据结构的时候，耗费了大量脑细胞却总是记不住种类繁多的排序算法；而勉强记住，应付了考试后，过了几个月又忘得一干二净，没办法，只能写下来供以后参考。</p><p>其实从排序算法的类别繁多以及在数据结构课程中占的时间比例可以看出这是计算机领域最经典也是研究最广泛的算法，这样说来，我等凡夫俗子不能马上顿悟也是情有可原了。</p><p>闲话少说，进入正题。</p><a id="more"></a><h2 id="排序算法的应用领域"><a href="#排序算法的应用领域" class="headerlink" title="排序算法的应用领域"></a>排序算法的应用领域</h2><p>在深入算法之前，还是要强调一下排序算法之所以重要，在于它是构成其它算法的基础。比如下面就是应用了排序算法的例子：</p><ul><li><strong>搜索</strong>： 排过序的数据可以使用二分查找（折半查找）快速地搜索某个元素。</li><li><strong>最邻近对</strong>： 给定n个数的集合，如何找到相差最小的一对数？如果集合已经排过序，那么一次线性查找就可以完成任务。</li><li><strong>元素唯一性</strong> – 给定n个数的集合，里面有重复的元素吗？这是最邻近对问题的一个特例。</li><li><strong>频率分布</strong>： 给定n个数的集合，哪个数出现的次数最多？（求众数）。如果集合是有序的，相同的元素势必会连在一起，一次线性循环即可搞定。如果要查找任意一个元素k出现了多少次，首先用二分查找找到k，然后再往左移动，直到出现不是k的元素位置，同理也往右移动，这样便可得到k出现的次数。</li><li><strong>选择</strong>： 一个数列里第k大的元素是哪个？如果元素已经是有序的，那么第k个元素就是我们要找的。</li><li><strong>找到两个集合的交集</strong>： 如果对两个集合分别排序，两个集合是否相交以及交集是多少就很容易求了。</li></ul><h2 id="排序问题的定义"><a href="#排序问题的定义" class="headerlink" title="排序问题的定义"></a>排序问题的定义</h2><p>首先我们明确一下排序算法要解决的问题，也就是排序问题的定义。<br>算法都有输入和输出，排序问题的输入就是一个包含N条记录的数列，为了下文叙述方便，姑且称为数列A；而输出则是一个排好序的新的数列，这里的排序可以认为是从小到大的一个序列。</p><p>OK，让我们看看各种算法是怎样巧妙地把无序的数列变成有序的吧。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>虽然排序算法种类繁多，但是观其内在，都会使用<strong>循环不变性</strong>这种逻辑方式来解决问题。<strong>循环不变性</strong>的概念用这样的方式来处理排序问题：</p><ul><li>从数列A的第一条记录遍历到最后一条记录，假设数列A有N条记录，那么转换成程序语言也就是从数组0索引循环至N-1索引</li><li>在循环的每一步中，都维持一个排好序的数列。这是循环不变性的直接体现。</li><li>每一步循环使得未排序的记录减1，排好序的数列中的记录加1。这样等到循环到最后的时候，整个数列就完成了排序。</li><li>不同排序算法的差别其实就在于如何遍历原数列以及如何维持排好序的数列。</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序的基本思想是“选择”，即从未排序数列中，每次选出其中最小的元素到已排序的数列中。<br>下面我们就使用<strong>循环不变性</strong>的概念来组织一下选择排序的基本思路：</p><ol><li>输入：包含N条记录的数列A</li><li>指针从 0 循环至 N-1</li><li>指针为i时，找到剩下记录（也就是指针右侧）中最小的记录</li><li>交换指针所处记录和找到的最小记录</li></ol><p>在上面的思路中，只有一个数列A，而实际上，数列A的前半部是已排序的数列，而后半部是未排序的数列，中间的分隔则是当前循环的指针i所在位置。由此可见，随着循环不断前进，指针不断前移，已排序的数列越来越长，未排序的数列越来越短，到最后数列A就全部是已排序的了。从这里可以看出，我们只使用数列A的空间就完成了排序，这种只利用输入的数组，不需要额外的空间的称为原地排序。实际应用中，数列A可能惊人的大，因此能够原地排序是一个很好的特性。</p><p>下面是C++的实现代码，仅供参考</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="comment">// 从第一个记录遍历到最后一个记录</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; ++i) &#123;</div><div class="line">        <span class="comment">// 记录当前指针的位置</span></div><div class="line">        <span class="keyword">int</span> min_index = i;</div><div class="line"></div><div class="line">        <span class="comment">// 从剩下的记录中找到最小的一个来</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= hi; ++j) &#123;</div><div class="line">            <span class="keyword">if</span> (a[min_index] &gt; a[j]) &#123;</div><div class="line">                min_index = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 交换指针所处记录和找到的最小记录</span></div><div class="line">        exch(a[i], a[min_index]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>选择排序的基本特点</p><ul><li>运行时间和输入没有关系，即使输入已经是有序的，也需要二次的时间复杂度</li><li>选择排序的记录移动是所有算法中最小的，每一个循环只有一次交换操作，总共只需要N次交换，也即N次移动</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>在选择排序中，循环的每一步我们都要线性查找剩余记录中最小的一个记录，而找到记录之后只需一次交换就可以把找到的记录安置到已排序的数列中，即<strong>选择</strong>记录难，<strong>插入</strong>记录容易；插入排序的方式正好相反，即<strong>插入</strong>记录南，<strong>选择</strong>记录容易。插入排序每次选择的时候就按顺序从剩余记录中取一个，插入的时候得和已排好序的元素比较确定位置。但是由于要插入的是已排序的数列，因此相比于选择排序在无序数列中的选择，插入排序的插入会相对简单一些，特别是数列已经部分排序的时候。</p><p>另外插入排序还有一个特性，在插入排序中相同记录在排序前和排序后的相对顺序都是不变的，因为记录要改变位置需要和它左边的记录比较，而如果在排序前记录就大于左边的记录的话是不可能改变位置的。稳定排序通常在涉及到二次排序时比较有用，比如公司的人事数据库先按姓名把员工排好序，然后又按照年龄在之前排好序的基础之上继续排序，这时稳定排序保证年龄相同的员工的排序和第一次按姓名排序的顺序保持一致。</p><p>基本思想</p><ol><li>输入：包含N条记录的数列A</li><li>指针从 0 循环至 N-1</li><li>指针为i时，指针所在的记录和位于它左边并且比它大的记录交换</li></ol><p>c++参考代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="comment">// 从第一个记录遍历到最后一个记录</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; ++i) &#123;</div><div class="line">        <span class="comment">// 指针所在的记录和位于它左边并且比它大的记录交换</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; lo; --j) &#123;</div><div class="line">            <span class="keyword">if</span> (a[j] &lt; a[j - <span class="number">1</span>]) &#123;</div><div class="line">                exch(a[j], a[j - <span class="number">1</span>]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本特点</p><ul><li>如果输入记录是部分排序的话，插入排序的运行时间是线性的</li><li>插入排序是稳定的，选择排序可不是稳定的</li></ul><h2 id="shell-排序"><a href="#shell-排序" class="headerlink" title="shell 排序"></a>shell 排序</h2><p>shell 排序是插入排序的增强版：插入排序在往左比较大小时每次只后退一步，而shell排序每次会后退多步。假设后退h步，那么得到的序列就是一个以h为间隔排序好的序列。shell排序会进行多次h排序。h的取值则从大慢慢减为1，这样做的理由是：</p><ul><li>当h很大时，以h为间隔的序列较小，排序可以很快完成</li><li>当h变为1时，由于之前已经进行了多次h间隔排序，序列已经部分排序，因此插入排序此时的运行时间是线性的，也可以很快完成。</li></ul><p>在实际中，通常h的取值序列有多种，不同的序列会导致不一样的时间复杂度。比较容易计算的是使用 3x + 1 这个公式来产生序列</p><p> c++参考代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> N = hi - lo + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// decide decrease sequence</span></div><div class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (h &lt; N / <span class="number">3</span>) &#123;</div><div class="line">        h = <span class="number">3</span> * h + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// h-sort the array</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h + lo; i &lt;= hi; ++i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h + lo &amp;&amp; a[j] &lt; a[j - h]; j -= h) &#123;</div><div class="line">                exch(a[j], a[j - h]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        h = h / <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本特点</p><ul><li>实现代码少，常用于嵌入式编程</li><li>时间复杂度未知，但优于二次</li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序体现了好的数据结构对算法的帮助。堆排序和选择排序的原理一致，都是从剩下的记录中不断选择最小的记录出来。但是选择排序需要线性的时间去查找最小记录。而从一个集合中选择最小的记录出来是一个经典的优先队列解决的问题，如果使用堆或者平衡二叉树来实现优先队列的话，就能让这个操作变成$log(N)$时间。从而，借助更好的优先队列实现，堆排序把选择排序从$O(n^2)$复杂度提升到了$O(n*log(n))$</p><p>下面就详细介绍一下堆排序用到的数据结构</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是实现优先队列插入和获取最小值操作的简单而高效的数据结构。堆通过维持记录部分排序而非完全排序来工作，因此会比较高效。一个堆实际上可以用一个二叉树来表示（注意不是二叉搜索树）。在一个最小堆中，一个节点的键值总是比它的子节点要小；在一个最大堆中，一个节点的键值总是比它的子节点要大。</p><p>堆使用数组来实现，不需要使用任何的指针。键值在堆中的位置充当了指针的作用。在这个数组中，我们把二叉树的根节点存储在数组的第一个位置（为了方便，数组索引从1开始），相应地把它的左右两个子节点放在第二和第三的位置。一般地，我们可以把完全二叉数第$l$层的$2^l$个键值从左到右放在$2^{l-1}$和$2^l - 1$之间。并且节点之间有以下关系：</p><ul><li>位于位置$k$的结点的父结点的位置是 $k / 2$</li><li>位于位置$k$的结点的子节点的位置是 $2k$ 和 $2k + 1$</li></ul><h3 id="如何构造一个堆"><a href="#如何构造一个堆" class="headerlink" title="如何构造一个堆"></a>如何构造一个堆</h3><p>可以通过往数组末端不断插入记录来递增地构造一个堆。在插入新记录时，堆的顺序可能会不满足预定的条件：在最小堆中新记录可能小于它的父节点，或者是在最大堆中新纪录大于它的父节点。在这种情况下，需要交换这个记录和它的父节点的位置，这称作一次上游,对这个记录不断上浮直到不能继续上游为止，就维持了堆的既有顺序。下面的代码显示了最小堆的上游代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="comment">// parent of node at k is k/2</span></div><div class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; pq_[k / <span class="number">2</span>] &gt; pq_[k]) &#123;</div><div class="line">        <span class="comment">// if children's node is larger than parent, exchange</span></div><div class="line">        exch(pq_[k], pq_[k / <span class="number">2</span>]);</div><div class="line"></div><div class="line">        <span class="comment">// swim up a level</span></div><div class="line">        k /= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于一个有$n$个记录的堆来说，一次上浮最多只需要$lg(n)$次操作，因此，构造堆的时间复杂度为$O(n*log(n))$复杂度</p><h3 id="如何从堆中取得最小值"><a href="#如何从堆中取得最小值" class="headerlink" title="如何从堆中取得最小值"></a>如何从堆中取得最小值</h3><p>从最小堆中取得最小的记录只需取数组的第一个元素即可，但是取完后二叉树会出现一个洞，需要把数组最后的一个记录填补到已经移除的第一个记录上；把最后一个记录移上来后可能会破坏堆的性质，如最小堆中根结点的记录可能会大于子结点，如果出现这种情况，需要将根结点和其较大的子结点交换，这称为一次下沉。下面是最小堆的下沉代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="comment">// make sure k is not the bottom level</span></div><div class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N_) &#123;</div><div class="line">        <span class="comment">// j is the left children</span></div><div class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;</div><div class="line">        <span class="keyword">if</span> (j &lt; N_ &amp;&amp; pq_[j] &lt; pq_[j + <span class="number">1</span>]) &#123;</div><div class="line">            <span class="comment">// now, j is the bigger children</span></div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (pq_[k] &gt; pq_[j]) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// if parent node is smaller than the bigger children, exchange</span></div><div class="line">        exch(pq_[k], pq_[j]);</div><div class="line"></div><div class="line">        <span class="comment">// sink down a level</span></div><div class="line">        k = j;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于一个有$n$个记录的堆来说，一次下沉最多只需要$lg(n)$次操作，因此，取得最小值的操作的时间复杂度为$O(log(n))$</p><h3 id="更快的构建堆的方法"><a href="#更快的构建堆的方法" class="headerlink" title="更快的构建堆的方法"></a>更快的构建堆的方法</h3><p>一条一条地插入记录来构造堆的方法需要$O(n*log(n))$的时间复杂度，如果记录序列全部已知，我们可以采用一种自底向上的构造方法，基本思路是从底端不是叶子结点的记录开始，做下沉操作，这样只需处理$n/2$个结点，这个时间复杂度基本上是线性的。下面是最大堆的下沉操作和构造方式：</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">      <span class="comment">// <span class="doctag">NOTE:</span> the value of node k is a[k - 1]</span></div><div class="line"></div><div class="line">      <span class="comment">// make sure k is not the bottom level</span></div><div class="line">      <span class="keyword">while</span> (<span class="number">2</span> * k &lt; N) &#123;</div><div class="line">          <span class="comment">// j is the left children</span></div><div class="line">          <span class="keyword">int</span> j = <span class="number">2</span> * k;</div><div class="line">          <span class="keyword">if</span> (j &lt; N &amp;&amp; a[j - <span class="number">1</span>] &lt; a[j]) &#123;</div><div class="line">              <span class="comment">// now, j is the bigger children</span></div><div class="line">              j++;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (a[k - <span class="number">1</span>] &gt; a[j - <span class="number">1</span>]) &#123;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// if parent node is smaller than the bigger children, exchange</span></div><div class="line">          exch(a[k - <span class="number">1</span>], a[j - <span class="number">1</span>]);</div><div class="line"></div><div class="line">          <span class="comment">// sink down a level</span></div><div class="line">          k = j;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Heap construction</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = N / <span class="number">2</span>; k &gt;= <span class="number">1</span>; --k) &#123;</div><div class="line">      <span class="comment">// loop for every non leaf node</span></div><div class="line">      sink(pq, k, N);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>堆排序实现参考代码(这里用到了上面的最大堆的下沉方法)</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; pq)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> N = pq.size();</div><div class="line"></div><div class="line">    <span class="comment">// Heap construction</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = N / <span class="number">2</span>; k &gt;= <span class="number">1</span>; --k) &#123;</div><div class="line">        <span class="comment">// loop for every non leaf node</span></div><div class="line">        sink(pq, k, N);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Sort down</span></div><div class="line">    <span class="keyword">while</span>(N &gt; <span class="number">1</span>) &#123;</div><div class="line">        exch(pq[<span class="number">0</span>], pq[N - <span class="number">1</span>]);</div><div class="line">        sink(pq, <span class="number">1</span>, --N);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本特点</p><ul><li>最坏的情况下也能达到$O(n*log(n))$，这是排序算法的理论最优。</li><li>缺点在于内部循环较长，无法使用缓存，并且是不稳定的，在实际中并不是最快的</li></ul><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序体现了分治的策略。主要思想是把大问题分解成小问题，不断递归去求解。下面的算法把数列递归地进行分解，然后再合并。</p><p>代码实现</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="comment">// merge tow subarray</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; ++i) &#123;</div><div class="line">        aux[i] = a[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> m = lo;</div><div class="line">    <span class="keyword">int</span> n = mid + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (m &gt; mid) &#123;</div><div class="line">            a[i] = aux[n++];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; hi) &#123;</div><div class="line">            a[i] = aux[m++];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[n] &lt; aux[m]) &#123;</div><div class="line">            a[i] = aux[n++];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            a[i] = aux[m++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// resuive sort</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> CUTOFF = <span class="number">7</span>;</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hi &lt;= lo) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// use insertion sort for small subarrays</span></div><div class="line">    <span class="keyword">if</span> (hi &lt;= lo + CUTOFF - <span class="number">1</span>) &#123;</div><div class="line">        insertion_sort(a, lo, hi);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</div><div class="line">    merge_sort(a, aux, lo, mid);</div><div class="line">    merge_sort(a, aux, mid + <span class="number">1</span>, hi);</div><div class="line"></div><div class="line">    <span class="comment">// do not merge if already sorted</span></div><div class="line">    <span class="keyword">if</span> (a[mid] &lt; a[mid + <span class="number">1</span>]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    merge(a, aux, lo, mid, hi);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述实现中借助了一个额外的aux数组来存储记录，并且在子问题规模很小时采用了插入排序。</p><p>基本特点</p><ul><li>归并排序的平均时间复杂度为$O(n*log(n))$</li><li>归并排序不是原地排序，需要额外的存储空间</li></ul><h2 id="归并排序的非递归实现"><a href="#归并排序的非递归实现" class="headerlink" title="归并排序的非递归实现"></a>归并排序的非递归实现</h2><p>基本思想</p><ol><li>遍历数组，首先归并排序大小为1的子数组</li><li>继续遍历，不断归并大小为2，4，16的子数组</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bottom_up_merge_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> N = hi - lo + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz += sz) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt; lo + N - sz; k += (sz + sz)) &#123;</div><div class="line">            merge(a, aux, k, k + sz - <span class="number">1</span>, <span class="built_in">std</span>::min(k + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本特点</p><ul><li>如果有足够的空间的话，非递归的归并排序的稳定性是工业级别的</li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序和归并排序类似，都是递归的算法，通过把问题分解为子问题来解决。不同的是，归并排序每次都把问题分成相同大小的两个子问题，然后通过归并操作进行合并；而快速排序则通过拆分的方式来分解问题，即每次找一个中间元素，把记录分成小于该中间元素（在中间元素左边）和大于该中间元素（在中间元素右边）的这两部分，此时中间元素已经排好序，只需对左右两边递归继续采用相同方式拆分即可。</p><p>和归并排序的归并操作是线性的时间复杂度类似，快速排序的拆分操作也是线性的。归并排序和快速排序的递归分解都把问题变成了一个二叉树的结构，而归并排序的二叉树是完全二叉树，因此树高是$lg(n)$，而快速排序的树高则与中间元素的选取有很大的关系，为了达到了归并排序相似的树高，要求输入记录必须是无序的，研究表明，无序的二叉树插入的树高平均只比完全二叉树高36%，因此该种情况下的快速排序和归并排序的时间复杂度是相同的。当然由于快速排序加入了随机的因素，我们只能说平均情况下快速排序和归并排序的时间复杂度是相同的，也不排除很小的概率的情况下快速排序的时间复杂度为$n^2$</p><p>基本思想</p><ul><li>随机打乱原始记录</li><li>针对索引为j的记录进行拆分，使得：<ul><li>记录a[j]位于最终已排序的位置</li><li>j左边的记录没有比a[j]大的</li><li>j右边的记录没有比a[j]小的</li></ul></li><li>对拆分后的各个部分递归进行上述处理</li></ul><p>代码实现</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = lo;</div><div class="line">    <span class="keyword">int</span> j = hi + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        <span class="comment">// process i pointer</span></div><div class="line">        <span class="comment">// find item on left to swap</span></div><div class="line">        <span class="keyword">while</span>(a[++i] &lt; a[lo]) &#123;</div><div class="line">            <span class="keyword">if</span> (i == hi) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// process j pointer</span></div><div class="line">        <span class="comment">// find item on right to swap</span></div><div class="line">        <span class="keyword">while</span>(a[--j] &gt; a[lo]) &#123;</div><div class="line">            <span class="keyword">if</span> (j == lo) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// find if pointers cross</span></div><div class="line">        <span class="keyword">if</span> (i &gt;= j) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// swap</span></div><div class="line">        exch(a[i], a[j]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// swap with partition item</span></div><div class="line">    exch(a[lo], a[j]);</div><div class="line"></div><div class="line">    <span class="comment">// return index of item now known to be in place</span></div><div class="line">    <span class="keyword">return</span> j;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_sub</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hi &lt;= lo + CUTOFF) &#123;</div><div class="line">        <span class="comment">// improvement 1:  use insertion fort for small subarray</span></div><div class="line">        insertion_sort(a, lo, hi);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// improvement 2: estimate partition item with median of three samples</span></div><div class="line">    <span class="keyword">int</span> m = median_of_three(a, lo, lo + (hi - lo)/ <span class="number">2</span>, hi);</div><div class="line">    exch(a[lo], a[m]);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</div><div class="line">    quick_sort_sub(a, lo, j - <span class="number">1</span>);</div><div class="line">    quick_sort_sub(a, j + <span class="number">1</span>, hi);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</div><div class="line">    <span class="comment">// shuffle is needed for performance guarantee</span></div><div class="line">    shuffle(a);</div><div class="line"></div><div class="line">    quick_sort_sub&lt;T&gt;(a, <span class="number">0</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(a.size()) - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码使用了两个提升：和归并排序中一样，我们在记录序列很小时采用了插入排序；另外我们本来是采用随机打乱后的记录顺序来选取中间值，为了让得到的二叉树更加平衡，我们需要选择接近数列中位数的记录作为中间值，这里我们采用了抽样的方式来计算中值。</p><p>基本特点</p><p>虽然快速排序理论上只能在概率上趋近于$n*lg(n)$的时间复杂度，但是由于它的内层循环较小，并且容易利用计算机缓存等原因，一个设计得很好的快速排序的效率是归并排序和堆排序的2-3倍！</p><p>在实际应用中，如果记录有许多重复的话，会发现快速排序接近于$n^2$的时间复杂度，这时候我们需要使用快速排序的改进版：3路快速排序</p><h2 id="3路快速排序"><a href="#3路快速排序" class="headerlink" title="3路快速排序"></a>3路快速排序</h2><p>基本思想是：</p><ul><li>把记录序列查分成3部分（而不是之前的两部分）</li><li>在lt和gt中间的记录都等于中间元素</li><li>lt左边的记录都不大于中间元素</li><li>lt右边的记录都不小于中间元素</li></ul><p>实现代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="comment">// * Let v be partitioning item a[lo].</span></div><div class="line"><span class="comment">// * Scan i from left to right.</span></div><div class="line"><span class="comment">//  - (a[i] &lt; v): exchange a[lt] with a[i]; increment both lt and i</span></div><div class="line"><span class="comment">//  - (a[i] &gt; v): exchange a[gt] with a[i]; decrement gt;</span></div><div class="line"><span class="comment">//  - (a[i] == v): increment i</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_3way_sub</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hi &lt;= lo + CUTOFF) &#123;</div><div class="line">        <span class="comment">// improvement 1:  use insertion fort for small subarray</span></div><div class="line">        insertion_sort(a, lo, hi);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lt = lo;</div><div class="line">    <span class="keyword">int</span> i = lo;</div><div class="line">    <span class="keyword">int</span> gt = hi;</div><div class="line"></div><div class="line">    <span class="comment">// improvement 2: estimate partition item with median of three samples</span></div><div class="line">    <span class="keyword">int</span> m = median_of_three(a, lo, lo + (hi - lo)/ <span class="number">2</span>, hi);</div><div class="line">    exch(a[lo], a[m]);</div><div class="line"></div><div class="line">    <span class="comment">// partition item</span></div><div class="line">    T v = a[lo];</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(i &lt;= gt) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] &lt; v) &#123;</div><div class="line">            exch(a[lt++], a[i++]);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; v) &#123;</div><div class="line">            exch(a[i], a[gt--]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    quick_sort_3way_sub(a, lo, lt - <span class="number">1</span>);</div><div class="line">    quick_sort_3way_sub(a, gt + <span class="number">1</span>, hi);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_3way</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</div><div class="line">    <span class="comment">// shuffle is needed for performance guarantee</span></div><div class="line">    shuffle(a);</div><div class="line"></div><div class="line">    quick_sort_3way_sub&lt;T&gt;(a, <span class="number">0</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(a.size()) - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至此，经典的排序方法已经介绍完毕。除了选择排序和插入排序需要二次的时间复杂度外，堆排序、归并排序以及快速排序都能达到$n*lg(n)$的时间复杂度，而这也是证明了的排序算法时间复杂度的下界，即这已经是最优算法了。但是从之前的讨论可以看到，在实际情况中，受到各种因素的限制，时间复杂度相同的算法的实际效率并不同，并且有可能相差数倍，当然，这是大O方式来衡量时间复杂度的一个弊端：即它只能忽略影响算法效率的其它因素，单单从输入规模上来看算法运行时间随输入规模的变化。从这个角度来看，虽然堆排序、归并排序以及快速排序都是最优算法，但是还可能有更快的排序算法等待着我们去发掘。</p><h2 id="几种排序方法的比较"><a href="#几种排序方法的比较" class="headerlink" title="几种排序方法的比较"></a>几种排序方法的比较</h2><p>最后再整体比较一下上述的几类排序算法，算是一个总结：</p><table><thead><tr><th>排序方法</th><th>原地排序</th><th>稳定排序</th><th>最差</th><th>平均</th><th>最好</th><th>备注</th></tr></thead><tbody><tr><td>选择排序</td><td>是</td><td>否</td><td>$$N^2/2$$</td><td>$$N^2/2$$</td><td>$$N^2/2$$</td><td>只需要N次交换</td></tr><tr><td>插入排序</td><td>是</td><td>是</td><td>$$N^2/2$$</td><td>$$N^2/4$$</td><td>$$N$$</td><td>N很小或数据部分排序时适用</td></tr><tr><td>shell排序</td><td>是</td><td>否</td><td>未知</td><td>未知</td><td>$$N$$</td><td>实现代码少常用于嵌入式编程，时间复杂度未知但低于二次</td><td></td></tr><tr><td>快速排序</td><td>是</td><td>否</td><td>$$N^2/2$$</td><td>$$2N*lg(N)$$</td><td>$$lg(N)$$</td><td>实际使用中最快的算法</td></tr><tr><td>3路快速排序</td><td>是</td><td>否</td><td>$$N^2/2$$</td><td>$$2N*lg(N)$$</td><td>$$N$$</td><td>快速排序在大量重复记录下的改进</td></tr><tr><td>归并排序</td><td>否</td><td>是</td><td>$$N*lg(N)$$</td><td>$$N*lg(N)$$</td><td>$$N*lg(N)$$</td><td>稳定排序</td></tr><tr><td>堆排序</td><td>是</td><td>否</td><td>$$2N*lg(N)$$</td><td>$$2N*lg(N)$$</td><td>$$N*lg(N)$$</td><td>原地排序的（节省空间）</td></tr><tr><td>？？？</td><td>是</td><td>是</td><td>$$N*lg(N)$$</td><td>$$N*lg(N)$$</td><td>$$N*lg(N)$$</td><td>终极排序算法:)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得上数据结构的时候，耗费了大量脑细胞却总是记不住种类繁多的排序算法；而勉强记住，应付了考试后，过了几个月又忘得一干二净，没办法，只能写下来供以后参考。&lt;/p&gt;
&lt;p&gt;其实从排序算法的类别繁多以及在数据结构课程中占的时间比例可以看出这是计算机领域最经典也是研究最广泛的算法，这样说来，我等凡夫俗子不能马上顿悟也是情有可原了。&lt;/p&gt;
&lt;p&gt;闲话少说，进入正题。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.cartosquare.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://www.cartosquare.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
